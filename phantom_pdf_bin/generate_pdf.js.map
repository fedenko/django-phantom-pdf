{"version":3,"sources":["webpack:///webpack/bootstrap f329aef35653ef948301","webpack:///./coffee/generate_pdf.coffee","webpack:///external \"webpage\"","webpack:///external \"system\"","webpack:///external \"fs\"","webpack:///./~/nunjucks/browser/nunjucks.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACrCA;;AAAA,QAAO,oBAAQ,CAAR,CAAkB,CAAC,MAAnB;;AAEP,UAAS,oBAAQ,CAAR;;AAET,MAAK,oBAAQ,CAAR;;AAIL,YAAW,oBAAQ,CAAR;;AACX,SAAQ,CAAC,SAAT,CAAmB;GAAA,YAAY,IAAZ;EAAnB;;AAEA,WAAU,MAAM,CAAC,IAAK;;AACtB,UAAS,MAAM,CAAC,IAAK;;AACrB,WAAU,IAAI,CAAC,KAAL,CAAW,MAAM,CAAC,IAAK,GAAvB;;AACV,kBAAiB,MAAM,CAAC,IAAK;;AAC7B,aAAY,IAAI,CAAC,KAAL,CAAW,MAAM,CAAC,IAAK,GAAvB;;AAMZ;;AACE;;KACE,OAAO,CAAC,SAAR,CACE;OAAA,UAAU,MAAV;OACA,QAAQ,IADR;OAEA,SAAS,KAFT;MADF;AADF;AADF;;AAOA,KAAI,CAAC,aAAL,GAAqB;GAAA,mBAAmB,cAAnB;;;AAGrB,KAAG,SAAS,CAAC,MAAb;GACE,IAAG,SAAS,CAAC,MAAM,CAAC,QAApB;KACE,kBAAkB,SAAS,CAAC,MAAM,CAAC;KACnC,SAAS,CAAC,MAAM,CAAC,QAAjB,GAA4B,OAAO,CAAC,QAAR,CAAiB,SAAC,OAAD,EAAU,QAAV;cAC3C,QAAQ,CAAC,YAAT,CAAsB,eAAtB,EACE;SAAA,UAAU,OAAV;SACA,WAAW,OADX;QADF;KAD2C,CAAjB,EAF9B;IADF;;;AASA,KAAG,SAAS,CAAC,MAAb;GACE,IAAG,SAAS,CAAC,MAAM,CAAC,QAApB;KACE,kBAAkB,SAAS,CAAC,MAAM,CAAC;KACnC,SAAS,CAAC,MAAM,CAAC,QAAjB,GAA4B,OAAO,CAAC,QAAR,CAAiB,SAAC,OAAD,EAAU,QAAV;cAC3C,QAAQ,CAAC,YAAT,CAAsB,eAAtB,EACE;SAAA,UAAU,OAAV;SACA,WAAW,OADX;QADF;KAD2C,CAAjB,EAF9B;IADF;;;AAUA,KAAI,CAAC,SAAL,GAAiB;;AAajB,KAAI,CAAC,IAAL,CAAU,OAAV,EAAmB,SAAC,MAAD;GACjB,IAAG,WAAU,SAAb;KAEE,OAAO,CAAC,GAAR,CAAY,6BAAZ;KACA,OAAO,CAAC,IAAR,GAHF;IAAA;KAUE,IAAI,CAAC,MAAL,CAAY,MAAZ;KACA,OAAO,CAAC,IAAR,GAXF;;AADiB,EAAnB;;;;;;;AChEA,qC;;;;;;ACAA,oC;;;;;;ACAA,gC;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD,qCAAoC;AACpC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,wBAAuB;AACvB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA,QAAO;AACP;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,iBAAgB;AAChB,kBAAiB;AACjB,kBAAiB;AACjB,gBAAe;AACf,gBAAe;AACf;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,qCAAoC;AACpC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,oEAAmE,iBAAiB;AACpF,kBAAiB,cAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAiB,KAAK;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oCAAmC,KAAK;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAiB,cAAc;AAC/B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA,yCAAwC;;AAExC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAc,mBAAmB;AACjC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAM;AACN;AACA,OAAM;AACN;AACA,OAAM;AACN;AACA;AACA;AACA;;;AAGA,QAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAsB,cAAc,EAAE;AACtC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAkB;AAClB;AACA,WAAU;AACV,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;;AAEA;AACA;AACA,OAAM;;AAEN;AACA;AACA,OAAM;;AAEN;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA4B,yBAAyB;AACrD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;;AAEd;AACA;AACA,OAAM;;AAEN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;;AAEV;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAE;;AAEF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA,OAAM;;AAEN;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;;AAEA;AACA,OAAM;;AAEN;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,OAAM;;AAEN;AACA;AACA,OAAM;;AAEN;AACA;AACA,sBAAqB,wBAAwB;AAC7C;AACA;AACA;AACA;AACA;AACA,GAAE;;AAEF;AACA;AACA;;AAEA;AACA;AACA,oDAAmD;AACnD,oDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;;AAEA,6CAA4C;AAC5C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA8B,WAAW;AACzC;AACA;AACA;AACA;;AAEA;AACA,OAAM;;;AAGN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;;AAEA;AACA;;AAEA;AACA,6CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAoB;AACpB;AACA;AACA,+BAA8B;AAC9B,OAAM;;AAEN;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAM;;AAEN;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAE;;AAEF;AACA;AACA;AACA;;;AAGA,QAAO;AACP;AACA;;;;AAIA,QAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;;;AAGA,QAAO;AACP;AACA;;AAEA,gDAA+C;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAiE,kBAAkB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAE;AACF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B,oBAAoB;AACjD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,8BAA6B,4BAA4B,aAAa,EAAE;;AAExE,QAAO;AACP;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,yCAAwC,KAAK,EAAE;AAC/C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,8CAA6C;;;AAG7C,QAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;;AAEA;AACA,OAAM;;AAEN;AACA;AACA;AACA,kDAAiD;AACjD,OAAM;;AAEN;AACA;AACA,OAAM;;AAEN;AACA;AACA,OAAM;;AAEN;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA,WAAU;AACV,OAAM;;AAEN;AACA;AACA;AACA,kFAAiF;AACjF,2CAA0C;AAC1C,0CAAyC;AACzC,sDAAqD;AACrD,8BAA6B;AAC7B,OAAM;;AAEN;AACA;AACA,0DAAyD;AACzD;;AAEA;AACA,0BAAyB,YAAY;AACrC,qEAAoE;AACpE,0BAAyB;AACzB,0BAAyB;AACzB;AACA,OAAM;;AAEN;AACA,iCAAgC;AAChC,OAAM;;AAEN;AACA,8CAA6C;AAC7C;AACA,OAAM;;AAEN;AACA;AACA;;AAEA;;AAEA;AACA;AACA,OAAM;;AAEN;AACA;;AAEA,kEAAiE;AACjE,gCAA+B,iBAAiB,QAAQ,EAAE;AAC1D,OAAM;;AAEN;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA,OAAM;;AAEN;AACA;AACA,yCAAwC,KAAK;AAC7C;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;;AAEA,sBAAqB,wBAAwB;AAC7C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;;AAEA,sBAAqB,gBAAgB;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAc;AACd;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mDAAkD;AAClD,8CAA6C,qBAAqB,UAAU,WAAW,IAAI;AAC3F;;AAEA;AACA;AACA,8DAA6D;AAC7D,uBAAsB;;AAEtB;AACA,uDAAsD;AACtD,sCAAqC;AACrC;AACA;AACA;AACA;AACA,eAAc;AACd;;AAEA;AACA;AACA;AACA,6HAA4H;AAC5H;AACA;AACA;AACA;AACA,sEAAqE;AACrE;AACA,OAAM;;AAEN;AACA;AACA,OAAM;;AAEN;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA,OAAM;;AAEN;AACA;AACA,OAAM;;AAEN;AACA,gDAA+C,KAAK;AACpD,OAAM;;AAEN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA,OAAM;;AAEN;AACA;;AAEA,sBAAqB,mBAAmB;AACxC;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,OAAM;;AAEN;AACA;;AAEA;AACA;AACA,WAAU;;AAEV;AACA;AACA;AACA,OAAM;;AAEN;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gDAA+C;AAC/C;;AAEA;AACA,WAAU;;AAEV;AACA;AACA;AACA,4BAA2B;AAC3B;AACA;AACA;AACA;AACA,4BAA2B;AAC3B;;AAEA;AACA;AACA;;AAEA;AACA;AACA,yEAAwE;;AAExE,iDAAgD;AAChD,6EAA4E;AAC5E,8BAA6B;;AAE7B;AACA,qDAAoD;AACpD,+EAA8E;AAC9E,kCAAiC;AACjC;AACA,WAAU;AACV,OAAM;;AAEN;AACA;AACA;AACA,4BAA2B;;AAE3B;AACA;;AAEA;AACA;AACA;AACA,WAAU;;AAEV;AACA,8BAA6B,QAAQ;;AAErC;AACA;;AAEA;AACA;AACA;AACA,eAAc;AACd,WAAU;AACV,8BAA6B,QAAQ;AACrC;AACA;;AAEA,0BAAyB;AACzB,OAAM;;AAEN;AACA,oCAAmC;AACnC;AACA,sBAAqB;AACrB;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oFAAmF;AACnF;AACA,OAAM;;AAEN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,8CAA6C;;AAE7C;AACA;AACA,0BAAyB;;AAEzB,sCAAqC;;AAErC;AACA;AACA;AACA,2CAA0C;;AAE1C;AACA;AACA;AACA,+DAA8D,GAAG;AACjE,sEAAqE;AACrE,iDAAgD,gCAAgC;AAChF,4CAA2C;;AAE3C;AACA,+BAA8B,+BAA+B;AAC7D;AACA;AACA;AACA,kFAAiF;AACjF;AACA;;AAEA;AACA;AACA;AACA,mBAAkB;AAClB,kCAAiC;AACjC;;AAEA,8BAA6B,OAAO,GAAG;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2CAA0C;AAC1C,oFAAmF;AACnF,oEAAmE;AACnE,wCAAuC;AACvC,wEAAuE;AACvE,2EAA0E;AAC1E,2EAA0E;;AAE1E;AACA;AACA;AACA,mBAAkB;AAClB,kCAAiC;AACjC;;AAEA,8BAA6B;AAC7B;AACA;AACA;AACA;AACA;;AAEA,kEAAiE;AACjE,iDAAgD,gCAAgC;AAChF,sCAAqC;AACrC,oEAAmE;AACnE,6EAA4E;;AAE5E;;AAEA;AACA;AACA,eAAc;;AAEd,8BAA6B;AAC7B;;AAEA,0BAAyB;AACzB;AACA,8CAA6C;AAC7C;AACA,4BAA2B;AAC3B;;AAEA,6CAA4C;AAC5C,OAAM;;AAEN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,8CAA6C;;AAE7C;AACA;AACA,0BAAyB;;AAEzB;AACA;AACA;;AAEA;AACA;AACA,eAAc;;AAEd,iDAAgD;;AAEhD;AACA;AACA;AACA,qEAAoE;AACpE,eAAc;AACd;AACA;AACA;AACA,4HAA2H;AAC3H,iEAAgE;AAChE;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sEAAqE;;AAErE;AACA;AACA;AACA,WAAU;;AAEV;AACA,0BAAyB;AACzB;;AAEA;AACA,8DAA6D;AAC7D;;AAEA;AACA,qDAAoD;AACpD;AACA,4BAA2B;AAC3B;;AAEA,6CAA4C;AAC5C,OAAM;;AAEN;AACA;AACA,OAAM;;AAEN;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;;AAEV,qDAAoD,uBAAuB,EAAE;AAC7E;;AAEA;AACA,oDAAmD,4BAA4B,EAAE;AACjF;AACA,gDAA+C,gCAAgC,EAAE;;AAEjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAuD;AACvD,wCAAuC;AACvC,qCAAoC;AACpC,qDAAoD;AACpD,kDAAiD,EAAE;AACnD;;AAEA;AACA;AACA;AACA;AACA;AACA,kDAAiD;AACjD;AACA,WAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAkC;AAClC,eAAc;AACd;;AAEA;AACA;;AAEA;AACA;AACA,WAAU;;AAEV;AACA,6CAA4C;AAC5C,yEAAwE;AACxE,0BAAyB,EAAE;AAC3B;;AAEA;AACA,OAAM;;AAEN;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uEAAsE;AACtE;AACA;AACA;AACA,mEAAkE;AAClE;AACA,iFAAgF;AAChF;AACA,OAAM;;AAEN;AACA;AACA,kCAAiC;AACjC;AACA,4CAA2C;AAC3C,OAAM;;AAEN;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,qEAAoE;AACpE;AACA;AACA,+EAA8E;AAC9E;AACA,OAAM;;AAEN;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oFAAmF;AACnF,8EAA6E;AAC7E,8BAA6B,OAAO;AACpC,6EAA4E,QAAQ;AACpF,8BAA6B;;AAE7B;;AAEA;AACA,wEAAuE;AACvE;AACA;AACA,kFAAiF;AACjF;AACA,WAAU;AACV,OAAM;;AAEN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAoE,QAAQ,EAAE;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA,sDAAqD;AACrD;AACA,OAAM;;AAEN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8DAA6D;AAC7D;AACA;AACA,OAAM;;AAEN;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,sEAAqE;AACrE;AACA,6DAA4D;AAC5D,0BAAyB;;AAEzB;AACA,OAAM;;AAEN;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA,OAAM;;AAEN;AACA,sCAAqC;AACrC,yCAAwC;AACxC;AACA;AACA,WAAU;AACV,uCAAsC;AACtC,0BAAyB;AACzB,OAAM;;AAEN;AACA;AACA,yCAAwC,KAAK;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,sCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAmD;AACnD;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;;AAEA;;AAEA;AACA,mDAAkD;AAClD;AACA,6CAA4C;AAC5C,yFAAwF;AACxF,0BAAyB,OAAO;AAChC,sDAAqD;AACrD,0BAAyB;AACzB;;AAEA;;AAEA;;AAEA;AACA,qBAAoB,mBAAmB;AACvC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,iCAAgC;AAChC,qBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;AACA,uCAAsC;AACtC,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA,GAAE;;AAEF;AACA,uBAAsB,iBAAiB;AACvC;AACA,WAAU,cAAc;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,0BAAyB,qBAAqB;AAC9C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;;;AAGA,QAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAM;;AAEN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAM;;AAEN;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAA+C,MAAM;AACrD;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAM;;AAEN;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,OAAM;;AAEN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAM;;AAEN;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAgC,4BAA4B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAM;;AAEN;AACA;AACA,0CAAyC,wBAAwB,GAAG;AACpE;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,OAAM;;AAEN;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA,qBAAoB,OAAO;AAC3B;AACA;AACA,wBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAwB,qBAAqB;AAC7C;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,OAAM;;AAEN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;;AAEA;AACA;AACA,4DAA2D;AAC3D;AACA,4DAA2D;AAC3D;AACA,2DAA0D;AAC1D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,OAAM;;AAEN;AACA;AACA;;AAEA;;AAEA;AACA;AACA,OAAM;;AAEN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;;AAEA;AACA,OAAM;;AAEN;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA,GAAE;;AAEF;;AAEA,yBAAwB,WAAW,UAAU,UAAU;AACvD;AACA;AACA;AACA;;AAEA,0CAAyC,iBAAiB;AAC1D;AACA,oCAAmC,cAAc;AACjD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,QAAO;AACP;AACA;;AAEA;;AAEA;;AAEA;AACA,0BAAyB;AACzB;;AAEA,sBAAqB;AACrB,qBAAoB;AACpB,0BAAyB;AACzB,wBAAuB;AACvB,wBAAuB;AACvB,uBAAsB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,uBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAkB;AAClB;AACA;AACA;;AAEA,yCAAwC,mCAAmC;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gDAA+C;AAC/C,iDAAgD;AAChD,kDAAiD;AACjD,mDAAkD;AAClD,qBAAoB,2BAA2B;AAC/C,qBAAoB,4BAA4B;AAChD,2CAA0C;AAC1C,2CAA0C;AAC1C,2CAA0C;AAC1C,0CAAyC;AACzoCAAmC;AACnC,oCAAmC;AACnC,oCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kBAAiB,KAAK;AACtB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAiB,KAAK;AACtB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,QAAO;AACP;AACA;;AAEA,iDAAgD;;AAEhD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,2CAA0C,OAAO;AACjD;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAM;;AAEN;AACA;;AAEA;AACA;AACA;;AAEA,6CAA4C,OAAO;AACnD;AACA;AACA;AACA;AACA;;AAEA,2CAA0C,OAAO;AACjD;AACA;AACA;;AAEA;AACA,OAAM;;AAEN;AACA;AACA;AACA,WAAU;AACV;AACA,GAAE;;AAEF;AACA,oCAAmC,oBAAoB;;AAEvD;AACA;AACA;;AAEA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA,GAAE;;AAEF;AACA;AACA;AACA;AACA;AACA,kCAAiC,2BAA2B;AAC5D;AACA,4CAA2C,4BAA4B;AACvE,8BAA6B,oCAAoC;AACjE;AACA,0CAAyC,oCAAoC;AAC7E,gCAA+B,2CAA2C;AAC1E;AACA;AACA,oCAAmC,mCAAmC;AACtE;AACA,sCAAqC,gDAAgD;AACrF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAE;AACF,wCAAuC,2BAA2B;AAClE;AACA;AACA;AACA,GAAE;AACF;AACA,oCAAmC,2BAA2B;AAC9D,oCAAmC,kCAAkC;AACrE,gDAA+C,uBAAuB;AACtE;AACA,wCAAuC,wCAAwC;AAC/E,gCAA+B,+BAA+B;AAC9D;AACA,wCAAuC,mBAAmB;AAC1D;AACA,wCAAuC,qBAAqB;AAC5D,oCAAmC,4BAA4B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAuC,0BAA0B;AACjE;AACA;AACA,GAAE;;AAEF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAE;;AAEF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,sBAAqB,gBAAgB;AACrC;AACA;AACA,kCAAiC,UAAU;AAC3C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,8BAA6B;;AAE7B,QAAO;AACP;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAiB,cAAc;AAC/B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;;AAEV;AACA;AACA,WAAU;;AAEV;AACA;;AAEA;AACA;AACA,eAAc;AACd;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uBAAsB,SAAS,WAAW;AAC1C;AACA;;AAEA;AACA;AACA;;;AAGA,QAAO;AACP;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAqB,oBAAoB;AACzC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA,GAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,wBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,+BAA8B,qBAAqB;AACnD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,eAAc;AACd,GAAE;AACF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,+CAA8C;AAC9C,2DAA0D;AAC1D,oEAAmE;AACnE;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAuB,gBAAgB;AACvC;;AAEA;AACA,mDAAkD;AAClD,+DAA8D;AAC9D,wEAAuE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,QAAO;AACP;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;;AAEA,oBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,qCAAoC,eAAe;AACnD;AACA;AACA;;AAEA;AACA;;AAEA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAU;AACV;AACA,WAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAU;;AAEV;AACA,OAAM;;AAEN;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA,OAAM;;AAEN;AACA;AACA,OAAM;;AAEN;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,sBAAqB,gBAAgB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAM;;AAEN;AACA;;AAEA;AACA;AACA;AACA,eAAc;AACd;;AAEA;AACA,OAAM;;AAEN;AACA;AACA,OAAM;;AAEN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAAyB;AACzB;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA,SAAQ;AACR,OAAM;;AAEN;AACA;AACA;AACA,SAAQ;AACR,OAAM;;AAEN;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,uBAAsB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAuB;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,UAAU,EAAE;AACzD;;AAEA;;AAEA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;;AAEA,sBAAqB,UAAU;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAM;;AAEN;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAc;AACd;;AAEA,wBAAuB,gBAAgB;AACvC;AACA;;AAEA;AACA,OAAM;;AAEN;AACA;AACA,0CAAyC,UAAU,EAAE;;AAErD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;;AAEV;AACA,OAAM;;AAEN;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA8C;AAC9C,WAAU;AACV;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA,wBAAuB,kBAAkB;AACzC;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;AACA;AACA;AACA,mBAAkB;AAClB,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;;AAEA;;AAEA;AACA;AACA,qCAAoC,yBAAyB;AAC7D;AACA,gDAA+C,EAAE;AACjD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAU;AACV;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,WAAU;;AAEV;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;AAGA,QAAO;AACP;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN,mCAAkC;AAClC;AACA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAkB;AAClB;AACA;AACA,uBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,4BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,WAAU;;AAEV;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA;;AAEA,qCAAoC;AACpC;AACA;AACA,yCAAwC;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB,kDAAkD;AAC3E;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAE;;AAEF;AACA;AACA;AACA;;;AAGA,QAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAM;;AAEN;AACA;;AAEA;AACA;AACA;AACA,eAAc;AACd;AACA,OAAM;;AAEN;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA,GAAE;;AAEF;;;AAGA,QAAO;AACP;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,OAAM;;AAEN;AACA;AACA;AACA,wBAAuB;AACvB,sDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA,GAAE;;AAEF;;;AAGA,QAAO;AACP;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAU;AACV;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+BAA8B,QAAQ;AACtC;AACA;AACA,eAAc;AACd,+BAA8B,QAAQ;AACtC;AACA;AACA;AACA;AACA,WAAU;;AAEV;AACA,cAAa;;AAEb;AACA;AACA,WAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;;;AAGA,QAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA,+BAA8B;AAC9B,uBAAsB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA,uBAAsB,iBAAiB;AACvC;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA,uBAAsB,iBAAiB;AACvC;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA,SAAQ;AACR;AACA,SAAQ;AACR;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM;AACN;AACA;AACA;AACA;AACA,oBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,2DAA0D;AAC1D;;AAEA;AACA;AACA;AACA,2BAA0B;AAC1B;;AAEA;AACA,2BAA0B;AAC1B;;AAEA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA,EAAC;AACD,E","file":"generate_pdf.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/phantom_pdf_bin/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap f329aef35653ef948301\n **/","# Create a page object\npage = require('webpage').create()\n# Require the system module so I can read the command line arguments\nsystem = require('system')\n# Require the FileSystem module, so I can read the cookie file\nfs = require('fs')\n# Read the url and output file location from the command line argument\n# Read the cookie file and split it by spaces\n# Because the way I constructed this file, separate each field using spaces\nnunjucks = require('nunjucks')\nnunjucks.configure autoescape: true\n\naddress = system.args[1]\noutput = system.args[2]\ncookies = JSON.parse(system.args[3])\nacceptLanguage = system.args[4]\npaperSize = JSON.parse(system.args[5])\n\n\n# Now we can add cookies into phantomjs, so when it renders the page, it\n# will have the same permission and data as the current user\n\nfor domain, domain_cookies of cookies\n  for name, value of domain_cookies\n    phantom.addCookie\n      'domain': domain\n      'name': name\n      'value': value\n\npage.customHeaders = 'Accept-Language': acceptLanguage\n\n# Set the page size and orientation\nif paperSize.header\n  if paperSize.header.contents\n    header_contents = paperSize.footer.contents\n    paperSize.header.contents = phantom.callback((pageNum, numPages) ->\n      nunjucks.renderString header_contents,\n        page_num: pageNum\n        num_pages: pageNum\n    )\n    # console.log paperSize.header.contents\nif paperSize.footer\n  if paperSize.footer.contents\n    footer_contents = paperSize.footer.contents\n    paperSize.footer.contents = phantom.callback((pageNum, numPages) ->\n      nunjucks.renderString footer_contents,\n        page_num: pageNum\n        num_pages: pageNum\n    )\n    # console.log paperSize.footer.contents\n\npage.paperSize = paperSize\n\n\n# console.log address\n# console.log output\n# console.log cookies\n# console.log acceptLanguage\n# console.log format\n# console.log orientation\n# console.log margin\n# console.log paperSize,\n# Now we have everything settled, let's render the page\n\npage.open address, (status) ->\n  if status != 'success'\n    # If PhantomJS failed to reach the address, print a message\n    console.log 'Unable to load the address!'\n    phantom.exit()\n  else\n    # Now create the output file and exit PhantomJS\n    # cookies = page.cookies\n    # console.log 'Listing cookies:'\n    # for i of cookies\n    #   console.log cookies[i].name + '=' + cookies[i].value\n    page.render output\n    phantom.exit()\n  return\n\n\n\n/** WEBPACK FOOTER **\n ** ./coffee/generate_pdf.coffee\n **/","module.exports = require(\"webpage\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"webpage\"\n ** module id = 1\n ** module chunks = 0\n **/","module.exports = require(\"system\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"system\"\n ** module id = 2\n ** module chunks = 0\n **/","module.exports = require(\"fs\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"fs\"\n ** module id = 3\n ** module chunks = 0\n **/","/*! Browser bundle of nunjucks 2.5.2  */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"nunjucks\"] = factory();\n\telse\n\t\troot[\"nunjucks\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar lib = __webpack_require__(1);\n\tvar env = __webpack_require__(2);\n\tvar Loader = __webpack_require__(15);\n\tvar loaders = __webpack_require__(14);\n\tvar precompile = __webpack_require__(3);\n\n\tmodule.exports = {};\n\tmodule.exports.Environment = env.Environment;\n\tmodule.exports.Template = env.Template;\n\n\tmodule.exports.Loader = Loader;\n\tmodule.exports.FileSystemLoader = loaders.FileSystemLoader;\n\tmodule.exports.PrecompiledLoader = loaders.PrecompiledLoader;\n\tmodule.exports.WebLoader = loaders.WebLoader;\n\n\tmodule.exports.compiler = __webpack_require__(7);\n\tmodule.exports.parser = __webpack_require__(8);\n\tmodule.exports.lexer = __webpack_require__(9);\n\tmodule.exports.runtime = __webpack_require__(12);\n\tmodule.exports.lib = lib;\n\tmodule.exports.nodes = __webpack_require__(10);\n\n\tmodule.exports.installJinjaCompat = __webpack_require__(18);\n\n\t// A single instance of an environment, since this is so commonly used\n\n\tvar e;\n\tmodule.exports.configure = function(templatesPath, opts) {\n\t    opts = opts || {};\n\t    if(lib.isObject(templatesPath)) {\n\t        opts = templatesPath;\n\t        templatesPath = null;\n\t    }\n\n\t    var TemplateLoader;\n\t    if(loaders.FileSystemLoader) {\n\t        TemplateLoader = new loaders.FileSystemLoader(templatesPath, {\n\t            watch: opts.watch,\n\t            noCache: opts.noCache\n\t        });\n\t    }\n\t    else if(loaders.WebLoader) {\n\t        TemplateLoader = new loaders.WebLoader(templatesPath, {\n\t            useCache: opts.web && opts.web.useCache,\n\t            async: opts.web && opts.web.async\n\t        });\n\t    }\n\n\t    e = new env.Environment(TemplateLoader, opts);\n\n\t    if(opts && opts.express) {\n\t        e.express(opts.express);\n\t    }\n\n\t    return e;\n\t};\n\n\tmodule.exports.compile = function(src, env, path, eagerCompile) {\n\t    if(!e) {\n\t        module.exports.configure();\n\t    }\n\t    return new module.exports.Template(src, env, path, eagerCompile);\n\t};\n\n\tmodule.exports.render = function(name, ctx, cb) {\n\t    if(!e) {\n\t        module.exports.configure();\n\t    }\n\n\t    return e.render(name, ctx, cb);\n\t};\n\n\tmodule.exports.renderString = function(src, ctx, cb) {\n\t    if(!e) {\n\t        module.exports.configure();\n\t    }\n\n\t    return e.renderString(src, ctx, cb);\n\t};\n\n\tif(precompile) {\n\t    module.exports.precompile = precompile.precompile;\n\t    module.exports.precompileString = precompile.precompileString;\n\t}\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tvar ArrayProto = Array.prototype;\n\tvar ObjProto = Object.prototype;\n\n\tvar escapeMap = {\n\t    '&': '&amp;',\n\t    '\"': '&quot;',\n\t    '\\'': '&#39;',\n\t    '<': '&lt;',\n\t    '>': '&gt;'\n\t};\n\n\tvar escapeRegex = /[&\"'<>]/g;\n\n\tvar lookupEscape = function(ch) {\n\t    return escapeMap[ch];\n\t};\n\n\tvar exports = module.exports = {};\n\n\texports.prettifyError = function(path, withInternals, err) {\n\t    // jshint -W022\n\t    // http://jslinterrors.com/do-not-assign-to-the-exception-parameter\n\t    if (!err.Update) {\n\t        // not one of ours, cast it\n\t        err = new exports.TemplateError(err);\n\t    }\n\t    err.Update(path);\n\n\t    // Unless they marked the dev flag, show them a trace from here\n\t    if (!withInternals) {\n\t        var old = err;\n\t        err = new Error(old.message);\n\t        err.name = old.name;\n\t    }\n\n\t    return err;\n\t};\n\n\texports.TemplateError = function(message, lineno, colno) {\n\t    var err = this;\n\n\t    if (message instanceof Error) { // for casting regular js errors\n\t        err = message;\n\t        message = message.name + ': ' + message.message;\n\n\t        try {\n\t            if(err.name = '') {}\n\t        }\n\t        catch(e) {\n\t            // If we can't set the name of the error object in this\n\t            // environment, don't use it\n\t            err = this;\n\t        }\n\t    } else {\n\t        if(Error.captureStackTrace) {\n\t            Error.captureStackTrace(err);\n\t        }\n\t    }\n\n\t    err.name = 'Template render error';\n\t    err.message = message;\n\t    err.lineno = lineno;\n\t    err.colno = colno;\n\t    err.firstUpdate = true;\n\n\t    err.Update = function(path) {\n\t        var message = '(' + (path || 'unknown path') + ')';\n\n\t        // only show lineno + colno next to path of template\n\t        // where error occurred\n\t        if (this.firstUpdate) {\n\t            if(this.lineno && this.colno) {\n\t                message += ' [Line ' + this.lineno + ', Column ' + this.colno + ']';\n\t            }\n\t            else if(this.lineno) {\n\t                message += ' [Line ' + this.lineno + ']';\n\t            }\n\t        }\n\n\t        message += '\\n ';\n\t        if (this.firstUpdate) {\n\t            message += ' ';\n\t        }\n\n\t        this.message = message + (this.message || '');\n\t        this.firstUpdate = false;\n\t        return this;\n\t    };\n\n\t    return err;\n\t};\n\n\texports.TemplateError.prototype = Error.prototype;\n\n\texports.escape = function(val) {\n\t  return val.replace(escapeRegex, lookupEscape);\n\t};\n\n\texports.isFunction = function(obj) {\n\t    return ObjProto.toString.call(obj) === '[object Function]';\n\t};\n\n\texports.isArray = Array.isArray || function(obj) {\n\t    return ObjProto.toString.call(obj) === '[object Array]';\n\t};\n\n\texports.isString = function(obj) {\n\t    return ObjProto.toString.call(obj) === '[object String]';\n\t};\n\n\texports.isObject = function(obj) {\n\t    return ObjProto.toString.call(obj) === '[object Object]';\n\t};\n\n\texports.groupBy = function(obj, val) {\n\t    var result = {};\n\t    var iterator = exports.isFunction(val) ? val : function(obj) { return obj[val]; };\n\t    for(var i=0; i<obj.length; i++) {\n\t        var value = obj[i];\n\t        var key = iterator(value, i);\n\t        (result[key] || (result[key] = [])).push(value);\n\t    }\n\t    return result;\n\t};\n\n\texports.toArray = function(obj) {\n\t    return Array.prototype.slice.call(obj);\n\t};\n\n\texports.without = function(array) {\n\t    var result = [];\n\t    if (!array) {\n\t        return result;\n\t    }\n\t    var index = -1,\n\t    length = array.length,\n\t    contains = exports.toArray(arguments).slice(1);\n\n\t    while(++index < length) {\n\t        if(exports.indexOf(contains, array[index]) === -1) {\n\t            result.push(array[index]);\n\t        }\n\t    }\n\t    return result;\n\t};\n\n\texports.extend = function(obj, obj2) {\n\t    for(var k in obj2) {\n\t        obj[k] = obj2[k];\n\t    }\n\t    return obj;\n\t};\n\n\texports.repeat = function(char_, n) {\n\t    var str = '';\n\t    for(var i=0; i<n; i++) {\n\t        str += char_;\n\t    }\n\t    return str;\n\t};\n\n\texports.each = function(obj, func, context) {\n\t    if(obj == null) {\n\t        return;\n\t    }\n\n\t    if(ArrayProto.each && obj.each === ArrayProto.each) {\n\t        obj.forEach(func, context);\n\t    }\n\t    else if(obj.length === +obj.length) {\n\t        for(var i=0, l=obj.length; i<l; i++) {\n\t            func.call(context, obj[i], i, obj);\n\t        }\n\t    }\n\t};\n\n\texports.map = function(obj, func) {\n\t    var results = [];\n\t    if(obj == null) {\n\t        return results;\n\t    }\n\n\t    if(ArrayProto.map && obj.map === ArrayProto.map) {\n\t        return obj.map(func);\n\t    }\n\n\t    for(var i=0; i<obj.length; i++) {\n\t        results[results.length] = func(obj[i], i);\n\t    }\n\n\t    if(obj.length === +obj.length) {\n\t        results.length = obj.length;\n\t    }\n\n\t    return results;\n\t};\n\n\texports.asyncIter = function(arr, iter, cb) {\n\t    var i = -1;\n\n\t    function next() {\n\t        i++;\n\n\t        if(i < arr.length) {\n\t            iter(arr[i], i, next, cb);\n\t        }\n\t        else {\n\t            cb();\n\t        }\n\t    }\n\n\t    next();\n\t};\n\n\texports.asyncFor = function(obj, iter, cb) {\n\t    var keys = exports.keys(obj);\n\t    var len = keys.length;\n\t    var i = -1;\n\n\t    function next() {\n\t        i++;\n\t        var k = keys[i];\n\n\t        if(i < len) {\n\t            iter(k, obj[k], i, len, next);\n\t        }\n\t        else {\n\t            cb();\n\t        }\n\t    }\n\n\t    next();\n\t};\n\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf#Polyfill\n\texports.indexOf = Array.prototype.indexOf ?\n\t    function (arr, searchElement, fromIndex) {\n\t        return Array.prototype.indexOf.call(arr, searchElement, fromIndex);\n\t    } :\n\t    function (arr, searchElement, fromIndex) {\n\t        var length = this.length >>> 0; // Hack to convert object.length to a UInt32\n\n\t        fromIndex = +fromIndex || 0;\n\n\t        if(Math.abs(fromIndex) === Infinity) {\n\t            fromIndex = 0;\n\t        }\n\n\t        if(fromIndex < 0) {\n\t            fromIndex += length;\n\t            if (fromIndex < 0) {\n\t                fromIndex = 0;\n\t            }\n\t        }\n\n\t        for(;fromIndex < length; fromIndex++) {\n\t            if (arr[fromIndex] === searchElement) {\n\t                return fromIndex;\n\t            }\n\t        }\n\n\t        return -1;\n\t    };\n\n\tif(!Array.prototype.map) {\n\t    Array.prototype.map = function() {\n\t        throw new Error('map is unimplemented for this js engine');\n\t    };\n\t}\n\n\texports.keys = function(obj) {\n\t    if(Object.prototype.keys) {\n\t        return obj.keys();\n\t    }\n\t    else {\n\t        var keys = [];\n\t        for(var k in obj) {\n\t            if(obj.hasOwnProperty(k)) {\n\t                keys.push(k);\n\t            }\n\t        }\n\t        return keys;\n\t    }\n\t};\n\n\texports.inOperator = function (key, val) {\n\t    if (exports.isArray(val)) {\n\t        return exports.indexOf(val, key) !== -1;\n\t    } else if (exports.isObject(val)) {\n\t        return key in val;\n\t    } else if (exports.isString(val)) {\n\t        return val.indexOf(key) !== -1;\n\t    } else {\n\t        throw new Error('Cannot use \"in\" operator to search for \"'\n\t            + key + '\" in unexpected types.');\n\t    }\n\t};\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar path = __webpack_require__(3);\n\tvar asap = __webpack_require__(4);\n\tvar lib = __webpack_require__(1);\n\tvar Obj = __webpack_require__(6);\n\tvar compiler = __webpack_require__(7);\n\tvar builtin_filters = __webpack_require__(13);\n\tvar builtin_loaders = __webpack_require__(14);\n\tvar runtime = __webpack_require__(12);\n\tvar globals = __webpack_require__(17);\n\tvar Frame = runtime.Frame;\n\tvar Template;\n\n\t// Unconditionally load in this loader, even if no other ones are\n\t// included (possible in the slim browser build)\n\tbuiltin_loaders.PrecompiledLoader = __webpack_require__(16);\n\n\t// If the user is using the async API, *always* call it\n\t// asynchronously even if the template was synchronous.\n\tfunction callbackAsap(cb, err, res) {\n\t    asap(function() { cb(err, res); });\n\t}\n\n\tvar Environment = Obj.extend({\n\t    init: function(loaders, opts) {\n\t        // The dev flag determines the trace that'll be shown on errors.\n\t        // If set to true, returns the full trace from the error point,\n\t        // otherwise will return trace starting from Template.render\n\t        // (the full trace from within nunjucks may confuse developers using\n\t        //  the library)\n\t        // defaults to false\n\t        opts = this.opts = opts || {};\n\t        this.opts.dev = !!opts.dev;\n\n\t        // The autoescape flag sets global autoescaping. If true,\n\t        // every string variable will be escaped by default.\n\t        // If false, strings can be manually escaped using the `escape` filter.\n\t        // defaults to true\n\t        this.opts.autoescape = opts.autoescape != null ? opts.autoescape : true;\n\n\t        // If true, this will make the system throw errors if trying\n\t        // to output a null or undefined value\n\t        this.opts.throwOnUndefined = !!opts.throwOnUndefined;\n\t        this.opts.trimBlocks = !!opts.trimBlocks;\n\t        this.opts.lstripBlocks = !!opts.lstripBlocks;\n\n\t        this.loaders = [];\n\n\t        if(!loaders) {\n\t            // The filesystem loader is only available server-side\n\t            if(builtin_loaders.FileSystemLoader) {\n\t                this.loaders = [new builtin_loaders.FileSystemLoader('views')];\n\t            }\n\t            else if(builtin_loaders.WebLoader) {\n\t                this.loaders = [new builtin_loaders.WebLoader('/views')];\n\t            }\n\t        }\n\t        else {\n\t            this.loaders = lib.isArray(loaders) ? loaders : [loaders];\n\t        }\n\n\t        // It's easy to use precompiled templates: just include them\n\t        // before you configure nunjucks and this will automatically\n\t        // pick it up and use it\n\t        if((true) && window.nunjucksPrecompiled) {\n\t            this.loaders.unshift(\n\t                new builtin_loaders.PrecompiledLoader(window.nunjucksPrecompiled)\n\t            );\n\t        }\n\n\t        this.initCache();\n\n\t        this.globals = globals();\n\t        this.filters = {};\n\t        this.asyncFilters = [];\n\t        this.extensions = {};\n\t        this.extensionsList = [];\n\n\t        for(var name in builtin_filters) {\n\t            this.addFilter(name, builtin_filters[name]);\n\t        }\n\t    },\n\n\t    initCache: function() {\n\t        // Caching and cache busting\n\t        lib.each(this.loaders, function(loader) {\n\t            loader.cache = {};\n\n\t            if(typeof loader.on === 'function') {\n\t                loader.on('update', function(template) {\n\t                    loader.cache[template] = null;\n\t                });\n\t            }\n\t        });\n\t    },\n\n\t    addExtension: function(name, extension) {\n\t        extension._name = name;\n\t        this.extensions[name] = extension;\n\t        this.extensionsList.push(extension);\n\t        return this;\n\t    },\n\n\t    removeExtension: function(name) {\n\t        var extension = this.getExtension(name);\n\t        if (!extension) return;\n\n\t        this.extensionsList = lib.without(this.extensionsList, extension);\n\t        delete this.extensions[name];\n\t    },\n\n\t    getExtension: function(name) {\n\t        return this.extensions[name];\n\t    },\n\n\t    hasExtension: function(name) {\n\t        return !!this.extensions[name];\n\t    },\n\n\t    addGlobal: function(name, value) {\n\t        this.globals[name] = value;\n\t        return this;\n\t    },\n\n\t    getGlobal: function(name) {\n\t        if(typeof this.globals[name] === 'undefined') {\n\t            throw new Error('global not found: ' + name);\n\t        }\n\t        return this.globals[name];\n\t    },\n\n\t    addFilter: function(name, func, async) {\n\t        var wrapped = func;\n\n\t        if(async) {\n\t            this.asyncFilters.push(name);\n\t        }\n\t        this.filters[name] = wrapped;\n\t        return this;\n\t    },\n\n\t    getFilter: function(name) {\n\t        if(!this.filters[name]) {\n\t            throw new Error('filter not found: ' + name);\n\t        }\n\t        return this.filters[name];\n\t    },\n\n\t    resolveTemplate: function(loader, parentName, filename) {\n\t        var isRelative = (loader.isRelative && parentName)? loader.isRelative(filename) : false;\n\t        return (isRelative && loader.resolve)? loader.resolve(parentName, filename) : filename;\n\t    },\n\n\t    getTemplate: function(name, eagerCompile, parentName, ignoreMissing, cb) {\n\t        var that = this;\n\t        var tmpl = null;\n\t        if(name && name.raw) {\n\t            // this fixes autoescape for templates referenced in symbols\n\t            name = name.raw;\n\t        }\n\n\t        if(lib.isFunction(parentName)) {\n\t            cb = parentName;\n\t            parentName = null;\n\t            eagerCompile = eagerCompile || false;\n\t        }\n\n\t        if(lib.isFunction(eagerCompile)) {\n\t            cb = eagerCompile;\n\t            eagerCompile = false;\n\t        }\n\n\t        if (name instanceof Template) {\n\t             tmpl = name;\n\t        }\n\t        else if(typeof name !== 'string') {\n\t            throw new Error('template names must be a string: ' + name);\n\t        }\n\t        else {\n\t            for (var i = 0; i < this.loaders.length; i++) {\n\t                var _name = this.resolveTemplate(this.loaders[i], parentName, name);\n\t                tmpl = this.loaders[i].cache[_name];\n\t                if (tmpl) break;\n\t            }\n\t        }\n\n\t        if(tmpl) {\n\t            if(eagerCompile) {\n\t                tmpl.compile();\n\t            }\n\n\t            if(cb) {\n\t                cb(null, tmpl);\n\t            }\n\t            else {\n\t                return tmpl;\n\t            }\n\t        } else {\n\t            var syncResult;\n\t            var _this = this;\n\n\t            var createTemplate = function(err, info) {\n\t                if(!info && !err) {\n\t                    if(!ignoreMissing) {\n\t                        err = new Error('template not found: ' + name);\n\t                    }\n\t                }\n\n\t                if (err) {\n\t                    if(cb) {\n\t                        cb(err);\n\t                    }\n\t                    else {\n\t                        throw err;\n\t                    }\n\t                }\n\t                else {\n\t                    var tmpl;\n\t                    if(info) {\n\t                        tmpl = new Template(info.src, _this,\n\t                                            info.path, eagerCompile);\n\n\t                        if(!info.noCache) {\n\t                            info.loader.cache[name] = tmpl;\n\t                        }\n\t                    }\n\t                    else {\n\t                        tmpl = new Template('', _this,\n\t                                            '', eagerCompile);\n\t                    }\n\n\t                    if(cb) {\n\t                        cb(null, tmpl);\n\t                    }\n\t                    else {\n\t                        syncResult = tmpl;\n\t                    }\n\t                }\n\t            };\n\n\t            lib.asyncIter(this.loaders, function(loader, i, next, done) {\n\t                function handle(err, src) {\n\t                    if(err) {\n\t                        done(err);\n\t                    }\n\t                    else if(src) {\n\t                        src.loader = loader;\n\t                        done(null, src);\n\t                    }\n\t                    else {\n\t                        next();\n\t                    }\n\t                }\n\n\t                // Resolve name relative to parentName\n\t                name = that.resolveTemplate(loader, parentName, name);\n\n\t                if(loader.async) {\n\t                    loader.getSource(name, handle);\n\t                }\n\t                else {\n\t                    handle(null, loader.getSource(name));\n\t                }\n\t            }, createTemplate);\n\n\t            return syncResult;\n\t        }\n\t    },\n\n\t    express: function(app) {\n\t        var env = this;\n\n\t        function NunjucksView(name, opts) {\n\t            this.name          = name;\n\t            this.path          = name;\n\t            this.defaultEngine = opts.defaultEngine;\n\t            this.ext           = path.extname(name);\n\t            if (!this.ext && !this.defaultEngine) throw new Error('No default engine was specified and no extension was provided.');\n\t            if (!this.ext) this.name += (this.ext = ('.' !== this.defaultEngine[0] ? '.' : '') + this.defaultEngine);\n\t        }\n\n\t        NunjucksView.prototype.render = function(opts, cb) {\n\t          env.render(this.name, opts, cb);\n\t        };\n\n\t        app.set('view', NunjucksView);\n\t        app.set('nunjucksEnv', this);\n\t        return this;\n\t    },\n\n\t    render: function(name, ctx, cb) {\n\t        if(lib.isFunction(ctx)) {\n\t            cb = ctx;\n\t            ctx = null;\n\t        }\n\n\t        // We support a synchronous API to make it easier to migrate\n\t        // existing code to async. This works because if you don't do\n\t        // anything async work, the whole thing is actually run\n\t        // synchronously.\n\t        var syncResult = null;\n\n\t        this.getTemplate(name, function(err, tmpl) {\n\t            if(err && cb) {\n\t                callbackAsap(cb, err);\n\t            }\n\t            else if(err) {\n\t                throw err;\n\t            }\n\t            else {\n\t                syncResult = tmpl.render(ctx, cb);\n\t            }\n\t        });\n\n\t        return syncResult;\n\t    },\n\n\t    renderString: function(src, ctx, opts, cb) {\n\t        if(lib.isFunction(opts)) {\n\t            cb = opts;\n\t            opts = {};\n\t        }\n\t        opts = opts || {};\n\n\t        var tmpl = new Template(src, this, opts.path);\n\t        return tmpl.render(ctx, cb);\n\t    }\n\t});\n\n\tvar Context = Obj.extend({\n\t    init: function(ctx, blocks, env) {\n\t        // Has to be tied to an environment so we can tap into its globals.\n\t        this.env = env || new Environment();\n\n\t        // Make a duplicate of ctx\n\t        this.ctx = {};\n\t        for(var k in ctx) {\n\t            if(ctx.hasOwnProperty(k)) {\n\t                this.ctx[k] = ctx[k];\n\t            }\n\t        }\n\n\t        this.blocks = {};\n\t        this.exported = [];\n\n\t        for(var name in blocks) {\n\t            this.addBlock(name, blocks[name]);\n\t        }\n\t    },\n\n\t    lookup: function(name) {\n\t        // This is one of the most called functions, so optimize for\n\t        // the typical case where the name isn't in the globals\n\t        if(name in this.env.globals && !(name in this.ctx)) {\n\t            return this.env.globals[name];\n\t        }\n\t        else {\n\t            return this.ctx[name];\n\t        }\n\t    },\n\n\t    setVariable: function(name, val) {\n\t        this.ctx[name] = val;\n\t    },\n\n\t    getVariables: function() {\n\t        return this.ctx;\n\t    },\n\n\t    addBlock: function(name, block) {\n\t        this.blocks[name] = this.blocks[name] || [];\n\t        this.blocks[name].push(block);\n\t        return this;\n\t    },\n\n\t    getBlock: function(name) {\n\t        if(!this.blocks[name]) {\n\t            throw new Error('unknown block \"' + name + '\"');\n\t        }\n\n\t        return this.blocks[name][0];\n\t    },\n\n\t    getSuper: function(env, name, block, frame, runtime, cb) {\n\t        var idx = lib.indexOf(this.blocks[name] || [], block);\n\t        var blk = this.blocks[name][idx + 1];\n\t        var context = this;\n\n\t        if(idx === -1 || !blk) {\n\t            throw new Error('no super block available for \"' + name + '\"');\n\t        }\n\n\t        blk(env, context, frame, runtime, cb);\n\t    },\n\n\t    addExport: function(name) {\n\t        this.exported.push(name);\n\t    },\n\n\t    getExported: function() {\n\t        var exported = {};\n\t        for(var i=0; i<this.exported.length; i++) {\n\t            var name = this.exported[i];\n\t            exported[name] = this.ctx[name];\n\t        }\n\t        return exported;\n\t    }\n\t});\n\n\tTemplate = Obj.extend({\n\t    init: function (src, env, path, eagerCompile) {\n\t        this.env = env || new Environment();\n\n\t        if(lib.isObject(src)) {\n\t            switch(src.type) {\n\t            case 'code': this.tmplProps = src.obj; break;\n\t            case 'string': this.tmplStr = src.obj; break;\n\t            }\n\t        }\n\t        else if(lib.isString(src)) {\n\t            this.tmplStr = src;\n\t        }\n\t        else {\n\t            throw new Error('src must be a string or an object describing ' +\n\t                            'the source');\n\t        }\n\n\t        this.path = path;\n\n\t        if(eagerCompile) {\n\t            var _this = this;\n\t            try {\n\t                _this._compile();\n\t            }\n\t            catch(err) {\n\t                throw lib.prettifyError(this.path, this.env.opts.dev, err);\n\t            }\n\t        }\n\t        else {\n\t            this.compiled = false;\n\t        }\n\t    },\n\n\t    render: function(ctx, parentFrame, cb) {\n\t        if (typeof ctx === 'function') {\n\t            cb = ctx;\n\t            ctx = {};\n\t        }\n\t        else if (typeof parentFrame === 'function') {\n\t            cb = parentFrame;\n\t            parentFrame = null;\n\t        }\n\n\t        var forceAsync = true;\n\t        if(parentFrame) {\n\t            // If there is a frame, we are being called from internal\n\t            // code of another template, and the internal system\n\t            // depends on the sync/async nature of the parent template\n\t            // to be inherited, so force an async callback\n\t            forceAsync = false;\n\t        }\n\n\t        var _this = this;\n\t        // Catch compile errors for async rendering\n\t        try {\n\t            _this.compile();\n\t        } catch (_err) {\n\t            var err = lib.prettifyError(this.path, this.env.opts.dev, _err);\n\t            if (cb) return callbackAsap(cb, err);\n\t            else throw err;\n\t        }\n\n\t        var context = new Context(ctx || {}, _this.blocks, _this.env);\n\t        var frame = parentFrame ? parentFrame.push(true) : new Frame();\n\t        frame.topLevel = true;\n\t        var syncResult = null;\n\n\t        _this.rootRenderFunc(\n\t            _this.env,\n\t            context,\n\t            frame || new Frame(),\n\t            runtime,\n\t            function(err, res) {\n\t                if(err) {\n\t                    err = lib.prettifyError(_this.path, _this.env.opts.dev, err);\n\t                }\n\n\t                if(cb) {\n\t                    if(forceAsync) {\n\t                        callbackAsap(cb, err, res);\n\t                    }\n\t                    else {\n\t                        cb(err, res);\n\t                    }\n\t                }\n\t                else {\n\t                    if(err) { throw err; }\n\t                    syncResult = res;\n\t                }\n\t            }\n\t        );\n\n\t        return syncResult;\n\t    },\n\n\n\t    getExported: function(ctx, parentFrame, cb) {\n\t        if (typeof ctx === 'function') {\n\t            cb = ctx;\n\t            ctx = {};\n\t        }\n\n\t        if (typeof parentFrame === 'function') {\n\t            cb = parentFrame;\n\t            parentFrame = null;\n\t        }\n\n\t        // Catch compile errors for async rendering\n\t        try {\n\t            this.compile();\n\t        } catch (e) {\n\t            if (cb) return cb(e);\n\t            else throw e;\n\t        }\n\n\t        var frame = parentFrame ? parentFrame.push() : new Frame();\n\t        frame.topLevel = true;\n\n\t        // Run the rootRenderFunc to populate the context with exported vars\n\t        var context = new Context(ctx || {}, this.blocks, this.env);\n\t        this.rootRenderFunc(this.env,\n\t                            context,\n\t                            frame,\n\t                            runtime,\n\t                            function(err) {\n\t        \t\t        if ( err ) {\n\t        \t\t\t    cb(err, null);\n\t        \t\t        } else {\n\t        \t\t\t    cb(null, context.getExported());\n\t        \t\t        }\n\t                            });\n\t    },\n\n\t    compile: function() {\n\t        if(!this.compiled) {\n\t            this._compile();\n\t        }\n\t    },\n\n\t    _compile: function() {\n\t        var props;\n\n\t        if(this.tmplProps) {\n\t            props = this.tmplProps;\n\t        }\n\t        else {\n\t            var source = compiler.compile(this.tmplStr,\n\t                                          this.env.asyncFilters,\n\t                                          this.env.extensionsList,\n\t                                          this.path,\n\t                                          this.env.opts);\n\n\t            /* jslint evil: true */\n\t            var func = new Function(source);\n\t            props = func();\n\t        }\n\n\t        this.blocks = this._getBlocks(props);\n\t        this.rootRenderFunc = props.root;\n\t        this.compiled = true;\n\t    },\n\n\t    _getBlocks: function(props) {\n\t        var blocks = {};\n\n\t        for(var k in props) {\n\t            if(k.slice(0, 2) === 'b_') {\n\t                blocks[k.slice(2)] = props[k];\n\t            }\n\t        }\n\n\t        return blocks;\n\t    }\n\t});\n\n\tmodule.exports = {\n\t    Environment: Environment,\n\t    Template: Template\n\t};\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\n\t// rawAsap provides everything we need except exception management.\n\tvar rawAsap = __webpack_require__(5);\n\t// RawTasks are recycled to reduce GC churn.\n\tvar freeTasks = [];\n\t// We queue errors to ensure they are thrown in right order (FIFO).\n\t// Array-as-queue is good enough here, since we are just dealing with exceptions.\n\tvar pendingErrors = [];\n\tvar requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);\n\n\tfunction throwFirstError() {\n\t    if (pendingErrors.length) {\n\t        throw pendingErrors.shift();\n\t    }\n\t}\n\n\t/**\n\t * Calls a task as soon as possible after returning, in its own event, with priority\n\t * over other events like animation, reflow, and repaint. An error thrown from an\n\t * event will not interrupt, nor even substantially slow down the processing of\n\t * other events, but will be rather postponed to a lower priority event.\n\t * @param {{call}} task A callable object, typically a function that takes no\n\t * arguments.\n\t */\n\tmodule.exports = asap;\n\tfunction asap(task) {\n\t    var rawTask;\n\t    if (freeTasks.length) {\n\t        rawTask = freeTasks.pop();\n\t    } else {\n\t        rawTask = new RawTask();\n\t    }\n\t    rawTask.task = task;\n\t    rawAsap(rawTask);\n\t}\n\n\t// We wrap tasks with recyclable task objects.  A task object implements\n\t// `call`, just like a function.\n\tfunction RawTask() {\n\t    this.task = null;\n\t}\n\n\t// The sole purpose of wrapping the task is to catch the exception and recycle\n\t// the task object after its single use.\n\tRawTask.prototype.call = function () {\n\t    try {\n\t        this.task.call();\n\t    } catch (error) {\n\t        if (asap.onerror) {\n\t            // This hook exists purely for testing purposes.\n\t            // Its name will be periodically randomized to break any code that\n\t            // depends on its existence.\n\t            asap.onerror(error);\n\t        } else {\n\t            // In a web browser, exceptions are not fatal. However, to avoid\n\t            // slowing down the queue of pending tasks, we rethrow the error in a\n\t            // lower priority turn.\n\t            pendingErrors.push(error);\n\t            requestErrorThrow();\n\t        }\n\t    } finally {\n\t        this.task = null;\n\t        freeTasks[freeTasks.length] = this;\n\t    }\n\t};\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {\"use strict\";\n\n\t// Use the fastest means possible to execute a task in its own turn, with\n\t// priority over other events including IO, animation, reflow, and redraw\n\t// events in browsers.\n\t//\n\t// An exception thrown by a task will permanently interrupt the processing of\n\t// subsequent tasks. The higher level `asap` function ensures that if an\n\t// exception is thrown by a task, that the task queue will continue flushing as\n\t// soon as possible, but if you use `rawAsap` directly, you are responsible to\n\t// either ensure that no exceptions are thrown from your task, or to manually\n\t// call `rawAsap.requestFlush` if an exception is thrown.\n\tmodule.exports = rawAsap;\n\tfunction rawAsap(task) {\n\t    if (!queue.length) {\n\t        requestFlush();\n\t        flushing = true;\n\t    }\n\t    // Equivalent to push, but avoids a function call.\n\t    queue[queue.length] = task;\n\t}\n\n\tvar queue = [];\n\t// Once a flush has been requested, no further calls to `requestFlush` are\n\t// necessary until the next `flush` completes.\n\tvar flushing = false;\n\t// `requestFlush` is an implementation-specific method that attempts to kick\n\t// off a `flush` event as quickly as possible. `flush` will attempt to exhaust\n\t// the event queue before yielding to the browser's own event loop.\n\tvar requestFlush;\n\t// The position of the next task to execute in the task queue. This is\n\t// preserved between calls to `flush` so that it can be resumed if\n\t// a task throws an exception.\n\tvar index = 0;\n\t// If a task schedules additional tasks recursively, the task queue can grow\n\t// unbounded. To prevent memory exhaustion, the task queue will periodically\n\t// truncate already-completed tasks.\n\tvar capacity = 1024;\n\n\t// The flush function processes all tasks that have been scheduled with\n\t// `rawAsap` unless and until one of those tasks throws an exception.\n\t// If a task throws an exception, `flush` ensures that its state will remain\n\t// consistent and will resume where it left off when called again.\n\t// However, `flush` does not make any arrangements to be called again if an\n\t// exception is thrown.\n\tfunction flush() {\n\t    while (index < queue.length) {\n\t        var currentIndex = index;\n\t        // Advance the index before calling the task. This ensures that we will\n\t        // begin flushing on the next task the task throws an error.\n\t        index = index + 1;\n\t        queue[currentIndex].call();\n\t        // Prevent leaking memory for long chains of recursive calls to `asap`.\n\t        // If we call `asap` within tasks scheduled by `asap`, the queue will\n\t        // grow, but to avoid an O(n) walk for every task we execute, we don't\n\t        // shift tasks off the queue after they have been executed.\n\t        // Instead, we periodically shift 1024 tasks off the queue.\n\t        if (index > capacity) {\n\t            // Manually shift all values starting at the index back to the\n\t            // beginning of the queue.\n\t            for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {\n\t                queue[scan] = queue[scan + index];\n\t            }\n\t            queue.length -= index;\n\t            index = 0;\n\t        }\n\t    }\n\t    queue.length = 0;\n\t    index = 0;\n\t    flushing = false;\n\t}\n\n\t// `requestFlush` is implemented using a strategy based on data collected from\n\t// every available SauceLabs Selenium web driver worker at time of writing.\n\t// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593\n\n\t// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that\n\t// have WebKitMutationObserver but not un-prefixed MutationObserver.\n\t// Must use `global` instead of `window` to work in both frames and web\n\t// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.\n\tvar BrowserMutationObserver = global.MutationObserver || global.WebKitMutationObserver;\n\n\t// MutationObservers are desirable because they have high priority and work\n\t// reliably everywhere they are implemented.\n\t// They are implemented in all modern browsers.\n\t//\n\t// - Android 4-4.3\n\t// - Chrome 26-34\n\t// - Firefox 14-29\n\t// - Internet Explorer 11\n\t// - iPad Safari 6-7.1\n\t// - iPhone Safari 7-7.1\n\t// - Safari 6-7\n\tif (typeof BrowserMutationObserver === \"function\") {\n\t    requestFlush = makeRequestCallFromMutationObserver(flush);\n\n\t// MessageChannels are desirable because they give direct access to the HTML\n\t// task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera\n\t// 11-12, and in web workers in many engines.\n\t// Although message channels yield to any queued rendering and IO tasks, they\n\t// would be better than imposing the 4ms delay of timers.\n\t// However, they do not work reliably in Internet Explorer or Safari.\n\n\t// Internet Explorer 10 is the only browser that has setImmediate but does\n\t// not have MutationObservers.\n\t// Although setImmediate yields to the browser's renderer, it would be\n\t// preferrable to falling back to setTimeout since it does not have\n\t// the minimum 4ms penalty.\n\t// Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and\n\t// Desktop to a lesser extent) that renders both setImmediate and\n\t// MessageChannel useless for the purposes of ASAP.\n\t// https://github.com/kriskowal/q/issues/396\n\n\t// Timers are implemented universally.\n\t// We fall back to timers in workers in most engines, and in foreground\n\t// contexts in the following browsers.\n\t// However, note that even this simple case requires nuances to operate in a\n\t// broad spectrum of browsers.\n\t//\n\t// - Firefox 3-13\n\t// - Internet Explorer 6-9\n\t// - iPad Safari 4.3\n\t// - Lynx 2.8.7\n\t} else {\n\t    requestFlush = makeRequestCallFromTimer(flush);\n\t}\n\n\t// `requestFlush` requests that the high priority event queue be flushed as\n\t// soon as possible.\n\t// This is useful to prevent an error thrown in a task from stalling the event\n\t// queue if the exception handled by Node.js’s\n\t// `process.on(\"uncaughtException\")` or by a domain.\n\trawAsap.requestFlush = requestFlush;\n\n\t// To request a high priority event, we induce a mutation observer by toggling\n\t// the text of a text node between \"1\" and \"-1\".\n\tfunction makeRequestCallFromMutationObserver(callback) {\n\t    var toggle = 1;\n\t    var observer = new BrowserMutationObserver(callback);\n\t    var node = document.createTextNode(\"\");\n\t    observer.observe(node, {characterData: true});\n\t    return function requestCall() {\n\t        toggle = -toggle;\n\t        node.data = toggle;\n\t    };\n\t}\n\n\t// The message channel technique was discovered by Malte Ubl and was the\n\t// original foundation for this library.\n\t// http://www.nonblocking.io/2011/06/windownexttick.html\n\n\t// Safari 6.0.5 (at least) intermittently fails to create message ports on a\n\t// page's first load. Thankfully, this version of Safari supports\n\t// MutationObservers, so we don't need to fall back in that case.\n\n\t// function makeRequestCallFromMessageChannel(callback) {\n\t//     var channel = new MessageChannel();\n\t//     channel.port1.onmessage = callback;\n\t//     return function requestCall() {\n\t//         channel.port2.postMessage(0);\n\t//     };\n\t// }\n\n\t// For reasons explained above, we are also unable to use `setImmediate`\n\t// under any circumstances.\n\t// Even if we were, there is another bug in Internet Explorer 10.\n\t// It is not sufficient to assign `setImmediate` to `requestFlush` because\n\t// `setImmediate` must be called *by name* and therefore must be wrapped in a\n\t// closure.\n\t// Never forget.\n\n\t// function makeRequestCallFromSetImmediate(callback) {\n\t//     return function requestCall() {\n\t//         setImmediate(callback);\n\t//     };\n\t// }\n\n\t// Safari 6.0 has a problem where timers will get lost while the user is\n\t// scrolling. This problem does not impact ASAP because Safari 6.0 supports\n\t// mutation observers, so that implementation is used instead.\n\t// However, if we ever elect to use timers in Safari, the prevalent work-around\n\t// is to add a scroll event listener that calls for a flush.\n\n\t// `setTimeout` does not call the passed callback if the delay is less than\n\t// approximately 7 in web workers in Firefox 8 through 18, and sometimes not\n\t// even then.\n\n\tfunction makeRequestCallFromTimer(callback) {\n\t    return function requestCall() {\n\t        // We dispatch a timeout with a specified delay of 0 for engines that\n\t        // can reliably accommodate that request. This will usually be snapped\n\t        // to a 4 milisecond delay, but once we're flushing, there's no delay\n\t        // between events.\n\t        var timeoutHandle = setTimeout(handleTimer, 0);\n\t        // However, since this timer gets frequently dropped in Firefox\n\t        // workers, we enlist an interval handle that will try to fire\n\t        // an event 20 times per second until it succeeds.\n\t        var intervalHandle = setInterval(handleTimer, 50);\n\n\t        function handleTimer() {\n\t            // Whichever timer succeeds will cancel both timers and\n\t            // execute the callback.\n\t            clearTimeout(timeoutHandle);\n\t            clearInterval(intervalHandle);\n\t            callback();\n\t        }\n\t    };\n\t}\n\n\t// This is for `asap.js` only.\n\t// Its name will be periodically randomized to break any code that depends on\n\t// its existence.\n\trawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;\n\n\t// ASAP was originally a nextTick shim included in Q. This was factored out\n\t// into this ASAP package. It was later adapted to RSVP which made further\n\t// amendments. These decisions, particularly to marginalize MessageChannel and\n\t// to capture the MutationObserver implementation in a closure, were integrated\n\t// back into ASAP proper.\n\t// https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\t// A simple class system, more documentation to come\n\n\tfunction extend(cls, name, props) {\n\t    // This does that same thing as Object.create, but with support for IE8\n\t    var F = function() {};\n\t    F.prototype = cls.prototype;\n\t    var prototype = new F();\n\n\t    // jshint undef: false\n\t    var fnTest = /xyz/.test(function(){ xyz; }) ? /\\bparent\\b/ : /.*/;\n\t    props = props || {};\n\n\t    for(var k in props) {\n\t        var src = props[k];\n\t        var parent = prototype[k];\n\n\t        if(typeof parent === 'function' &&\n\t           typeof src === 'function' &&\n\t           fnTest.test(src)) {\n\t            /*jshint -W083 */\n\t            prototype[k] = (function (src, parent) {\n\t                return function() {\n\t                    // Save the current parent method\n\t                    var tmp = this.parent;\n\n\t                    // Set parent to the previous method, call, and restore\n\t                    this.parent = parent;\n\t                    var res = src.apply(this, arguments);\n\t                    this.parent = tmp;\n\n\t                    return res;\n\t                };\n\t            })(src, parent);\n\t        }\n\t        else {\n\t            prototype[k] = src;\n\t        }\n\t    }\n\n\t    prototype.typename = name;\n\n\t    var new_cls = function() {\n\t        if(prototype.init) {\n\t            prototype.init.apply(this, arguments);\n\t        }\n\t    };\n\n\t    new_cls.prototype = prototype;\n\t    new_cls.prototype.constructor = new_cls;\n\n\t    new_cls.extend = function(name, props) {\n\t        if(typeof name === 'object') {\n\t            props = name;\n\t            name = 'anonymous';\n\t        }\n\t        return extend(new_cls, name, props);\n\t    };\n\n\t    return new_cls;\n\t}\n\n\tmodule.exports = extend(Object, 'Object', {});\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar lib = __webpack_require__(1);\n\tvar parser = __webpack_require__(8);\n\tvar transformer = __webpack_require__(11);\n\tvar nodes = __webpack_require__(10);\n\t// jshint -W079\n\tvar Object = __webpack_require__(6);\n\tvar Frame = __webpack_require__(12).Frame;\n\n\t// These are all the same for now, but shouldn't be passed straight\n\t// through\n\tvar compareOps = {\n\t    '==': '==',\n\t    '===': '===',\n\t    '!=': '!=',\n\t    '!==': '!==',\n\t    '<': '<',\n\t    '>': '>',\n\t    '<=': '<=',\n\t    '>=': '>='\n\t};\n\n\t// A common pattern is to emit binary operators\n\tfunction binOpEmitter(str) {\n\t    return function(node, frame) {\n\t        this.compile(node.left, frame);\n\t        this.emit(str);\n\t        this.compile(node.right, frame);\n\t    };\n\t}\n\n\tvar Compiler = Object.extend({\n\t    init: function(templateName, throwOnUndefined) {\n\t        this.templateName = templateName;\n\t        this.codebuf = [];\n\t        this.lastId = 0;\n\t        this.buffer = null;\n\t        this.bufferStack = [];\n\t        this.scopeClosers = '';\n\t        this.inBlock = false;\n\t        this.throwOnUndefined = throwOnUndefined;\n\t    },\n\n\t    fail: function (msg, lineno, colno) {\n\t        if (lineno !== undefined) lineno += 1;\n\t        if (colno !== undefined) colno += 1;\n\n\t        throw new lib.TemplateError(msg, lineno, colno);\n\t    },\n\n\t    pushBufferId: function(id) {\n\t        this.bufferStack.push(this.buffer);\n\t        this.buffer = id;\n\t        this.emit('var ' + this.buffer + ' = \"\";');\n\t    },\n\n\t    popBufferId: function() {\n\t        this.buffer = this.bufferStack.pop();\n\t    },\n\n\t    emit: function(code) {\n\t        this.codebuf.push(code);\n\t    },\n\n\t    emitLine: function(code) {\n\t        this.emit(code + '\\n');\n\t    },\n\n\t    emitLines: function() {\n\t        lib.each(lib.toArray(arguments), function(line) {\n\t            this.emitLine(line);\n\t        }, this);\n\t    },\n\n\t    emitFuncBegin: function(name) {\n\t        this.buffer = 'output';\n\t        this.scopeClosers = '';\n\t        this.emitLine('function ' + name + '(env, context, frame, runtime, cb) {');\n\t        this.emitLine('var lineno = null;');\n\t        this.emitLine('var colno = null;');\n\t        this.emitLine('var ' + this.buffer + ' = \"\";');\n\t        this.emitLine('try {');\n\t    },\n\n\t    emitFuncEnd: function(noReturn) {\n\t        if(!noReturn) {\n\t            this.emitLine('cb(null, ' + this.buffer +');');\n\t        }\n\n\t        this.closeScopeLevels();\n\t        this.emitLine('} catch (e) {');\n\t        this.emitLine('  cb(runtime.handleError(e, lineno, colno));');\n\t        this.emitLine('}');\n\t        this.emitLine('}');\n\t        this.buffer = null;\n\t    },\n\n\t    addScopeLevel: function() {\n\t        this.scopeClosers += '})';\n\t    },\n\n\t    closeScopeLevels: function() {\n\t        this.emitLine(this.scopeClosers + ';');\n\t        this.scopeClosers = '';\n\t    },\n\n\t    withScopedSyntax: function(func) {\n\t        var scopeClosers = this.scopeClosers;\n\t        this.scopeClosers = '';\n\n\t        func.call(this);\n\n\t        this.closeScopeLevels();\n\t        this.scopeClosers = scopeClosers;\n\t    },\n\n\t    makeCallback: function(res) {\n\t        var err = this.tmpid();\n\n\t        return 'function(' + err + (res ? ',' + res : '') + ') {\\n' +\n\t            'if(' + err + ') { cb(' + err + '); return; }';\n\t    },\n\n\t    tmpid: function() {\n\t        this.lastId++;\n\t        return 't_' + this.lastId;\n\t    },\n\n\t    _templateName: function() {\n\t        return this.templateName == null? 'undefined' : JSON.stringify(this.templateName);\n\t    },\n\n\t    _compileChildren: function(node, frame) {\n\t        var children = node.children;\n\t        for(var i=0, l=children.length; i<l; i++) {\n\t            this.compile(children[i], frame);\n\t        }\n\t    },\n\n\t    _compileAggregate: function(node, frame, startChar, endChar) {\n\t        if(startChar) {\n\t            this.emit(startChar);\n\t        }\n\n\t        for(var i=0; i<node.children.length; i++) {\n\t            if(i > 0) {\n\t                this.emit(',');\n\t            }\n\n\t            this.compile(node.children[i], frame);\n\t        }\n\n\t        if(endChar) {\n\t            this.emit(endChar);\n\t        }\n\t    },\n\n\t    _compileExpression: function(node, frame) {\n\t        // TODO: I'm not really sure if this type check is worth it or\n\t        // not.\n\t        this.assertType(\n\t            node,\n\t            nodes.Literal,\n\t            nodes.Symbol,\n\t            nodes.Group,\n\t            nodes.Array,\n\t            nodes.Dict,\n\t            nodes.FunCall,\n\t            nodes.Caller,\n\t            nodes.Filter,\n\t            nodes.LookupVal,\n\t            nodes.Compare,\n\t            nodes.InlineIf,\n\t            nodes.In,\n\t            nodes.And,\n\t            nodes.Or,\n\t            nodes.Not,\n\t            nodes.Add,\n\t            nodes.Concat,\n\t            nodes.Sub,\n\t            nodes.Mul,\n\t            nodes.Div,\n\t            nodes.FloorDiv,\n\t            nodes.Mod,\n\t            nodes.Pow,\n\t            nodes.Neg,\n\t            nodes.Pos,\n\t            nodes.Compare,\n\t            nodes.NodeList\n\t        );\n\t        this.compile(node, frame);\n\t    },\n\n\t    assertType: function(node /*, types */) {\n\t        var types = lib.toArray(arguments).slice(1);\n\t        var success = false;\n\n\t        for(var i=0; i<types.length; i++) {\n\t            if(node instanceof types[i]) {\n\t                success = true;\n\t            }\n\t        }\n\n\t        if(!success) {\n\t            this.fail('assertType: invalid type: ' + node.typename,\n\t                      node.lineno,\n\t                      node.colno);\n\t        }\n\t    },\n\n\t    compileCallExtension: function(node, frame, async) {\n\t        var args = node.args;\n\t        var contentArgs = node.contentArgs;\n\t        var autoescape = typeof node.autoescape === 'boolean' ? node.autoescape : true;\n\n\t        if(!async) {\n\t            this.emit(this.buffer + ' += runtime.suppressValue(');\n\t        }\n\n\t        this.emit('env.getExtension(\"' + node.extName + '\")[\"' + node.prop + '\"](');\n\t        this.emit('context');\n\n\t        if(args || contentArgs) {\n\t            this.emit(',');\n\t        }\n\n\t        if(args) {\n\t            if(!(args instanceof nodes.NodeList)) {\n\t                this.fail('compileCallExtension: arguments must be a NodeList, ' +\n\t                          'use `parser.parseSignature`');\n\t            }\n\n\t            lib.each(args.children, function(arg, i) {\n\t                // Tag arguments are passed normally to the call. Note\n\t                // that keyword arguments are turned into a single js\n\t                // object as the last argument, if they exist.\n\t                this._compileExpression(arg, frame);\n\n\t                if(i !== args.children.length - 1 || contentArgs.length) {\n\t                    this.emit(',');\n\t                }\n\t            }, this);\n\t        }\n\n\t        if(contentArgs.length) {\n\t            lib.each(contentArgs, function(arg, i) {\n\t                if(i > 0) {\n\t                    this.emit(',');\n\t                }\n\n\t                if(arg) {\n\t                    var id = this.tmpid();\n\n\t                    this.emitLine('function(cb) {');\n\t                    this.emitLine('if(!cb) { cb = function(err) { if(err) { throw err; }}}');\n\t                    this.pushBufferId(id);\n\n\t                    this.withScopedSyntax(function() {\n\t                        this.compile(arg, frame);\n\t                        this.emitLine('cb(null, ' + id + ');');\n\t                    });\n\n\t                    this.popBufferId();\n\t                    this.emitLine('return ' + id + ';');\n\t                    this.emitLine('}');\n\t                }\n\t                else {\n\t                    this.emit('null');\n\t                }\n\t            }, this);\n\t        }\n\n\t        if(async) {\n\t            var res = this.tmpid();\n\t            this.emitLine(', ' + this.makeCallback(res));\n\t            this.emitLine(this.buffer + ' += runtime.suppressValue(' + res + ', ' + autoescape + ' && env.opts.autoescape);');\n\t            this.addScopeLevel();\n\t        }\n\t        else {\n\t            this.emit(')');\n\t            this.emit(', ' + autoescape + ' && env.opts.autoescape);\\n');\n\t        }\n\t    },\n\n\t    compileCallExtensionAsync: function(node, frame) {\n\t        this.compileCallExtension(node, frame, true);\n\t    },\n\n\t    compileNodeList: function(node, frame) {\n\t        this._compileChildren(node, frame);\n\t    },\n\n\t    compileLiteral: function(node) {\n\t        if(typeof node.value === 'string') {\n\t            var val = node.value.replace(/\\\\/g, '\\\\\\\\');\n\t            val = val.replace(/\"/g, '\\\\\"');\n\t            val = val.replace(/\\n/g, '\\\\n');\n\t            val = val.replace(/\\r/g, '\\\\r');\n\t            val = val.replace(/\\t/g, '\\\\t');\n\t            this.emit('\"' + val  + '\"');\n\t        }\n\t        else if (node.value === null) {\n\t            this.emit('null');\n\t        }\n\t        else {\n\t            this.emit(node.value.toString());\n\t        }\n\t    },\n\n\t    compileSymbol: function(node, frame) {\n\t        var name = node.value;\n\t        var v;\n\n\t        if((v = frame.lookup(name))) {\n\t            this.emit(v);\n\t        }\n\t        else {\n\t            this.emit('runtime.contextOrFrameLookup(' +\n\t                      'context, frame, \"' + name + '\")');\n\t        }\n\t    },\n\n\t    compileGroup: function(node, frame) {\n\t        this._compileAggregate(node, frame, '(', ')');\n\t    },\n\n\t    compileArray: function(node, frame) {\n\t        this._compileAggregate(node, frame, '[', ']');\n\t    },\n\n\t    compileDict: function(node, frame) {\n\t        this._compileAggregate(node, frame, '{', '}');\n\t    },\n\n\t    compilePair: function(node, frame) {\n\t        var key = node.key;\n\t        var val = node.value;\n\n\t        if(key instanceof nodes.Symbol) {\n\t            key = new nodes.Literal(key.lineno, key.colno, key.value);\n\t        }\n\t        else if(!(key instanceof nodes.Literal &&\n\t                  typeof key.value === 'string')) {\n\t            this.fail('compilePair: Dict keys must be strings or names',\n\t                      key.lineno,\n\t                      key.colno);\n\t        }\n\n\t        this.compile(key, frame);\n\t        this.emit(': ');\n\t        this._compileExpression(val, frame);\n\t    },\n\n\t    compileInlineIf: function(node, frame) {\n\t        this.emit('(');\n\t        this.compile(node.cond, frame);\n\t        this.emit('?');\n\t        this.compile(node.body, frame);\n\t        this.emit(':');\n\t        if(node.else_ !== null)\n\t            this.compile(node.else_, frame);\n\t        else\n\t            this.emit('\"\"');\n\t        this.emit(')');\n\t    },\n\n\t    compileIn: function(node, frame) {\n\t      this.emit('runtime.inOperator(');\n\t      this.compile(node.left, frame);\n\t      this.emit(',');\n\t      this.compile(node.right, frame);\n\t      this.emit(')');\n\t    },\n\n\t    compileOr: binOpEmitter(' || '),\n\t    compileAnd: binOpEmitter(' && '),\n\t    compileAdd: binOpEmitter(' + '),\n\t    // ensure concatenation instead of addition\n\t    // by adding empty string in between\n\t    compileConcat: binOpEmitter(' + \"\" + '),\n\t    compileSub: binOpEmitter(' - '),\n\t    compileMul: binOpEmitter(' * '),\n\t    compileDiv: binOpEmitter(' / '),\n\t    compileMod: binOpEmitter(' % '),\n\n\t    compileNot: function(node, frame) {\n\t        this.emit('!');\n\t        this.compile(node.target, frame);\n\t    },\n\n\t    compileFloorDiv: function(node, frame) {\n\t        this.emit('Math.floor(');\n\t        this.compile(node.left, frame);\n\t        this.emit(' / ');\n\t        this.compile(node.right, frame);\n\t        this.emit(')');\n\t    },\n\n\t    compilePow: function(node, frame) {\n\t        this.emit('Math.pow(');\n\t        this.compile(node.left, frame);\n\t        this.emit(', ');\n\t        this.compile(node.right, frame);\n\t        this.emit(')');\n\t    },\n\n\t    compileNeg: function(node, frame) {\n\t        this.emit('-');\n\t        this.compile(node.target, frame);\n\t    },\n\n\t    compilePos: function(node, frame) {\n\t        this.emit('+');\n\t        this.compile(node.target, frame);\n\t    },\n\n\t    compileCompare: function(node, frame) {\n\t        this.compile(node.expr, frame);\n\n\t        for(var i=0; i<node.ops.length; i++) {\n\t            var n = node.ops[i];\n\t            this.emit(' ' + compareOps[n.type] + ' ');\n\t            this.compile(n.expr, frame);\n\t        }\n\t    },\n\n\t    compileLookupVal: function(node, frame) {\n\t        this.emit('runtime.memberLookup((');\n\t        this._compileExpression(node.target, frame);\n\t        this.emit('),');\n\t        this._compileExpression(node.val, frame);\n\t        this.emit(')');\n\t    },\n\n\t    _getNodeName: function(node) {\n\t        switch (node.typename) {\n\t            case 'Symbol':\n\t                return node.value;\n\t            case 'FunCall':\n\t                return 'the return value of (' + this._getNodeName(node.name) + ')';\n\t            case 'LookupVal':\n\t                return this._getNodeName(node.target) + '[\"' +\n\t                       this._getNodeName(node.val) + '\"]';\n\t            case 'Literal':\n\t                return node.value.toString();\n\t            default:\n\t                return '--expression--';\n\t        }\n\t    },\n\n\t    compileFunCall: function(node, frame) {\n\t        // Keep track of line/col info at runtime by settings\n\t        // variables within an expression. An expression in javascript\n\t        // like (x, y, z) returns the last value, and x and y can be\n\t        // anything\n\t        this.emit('(lineno = ' + node.lineno +\n\t                  ', colno = ' + node.colno + ', ');\n\n\t        this.emit('runtime.callWrap(');\n\t        // Compile it as normal.\n\t        this._compileExpression(node.name, frame);\n\n\t        // Output the name of what we're calling so we can get friendly errors\n\t        // if the lookup fails.\n\t        this.emit(', \"' + this._getNodeName(node.name).replace(/\"/g, '\\\\\"') + '\", context, ');\n\n\t        this._compileAggregate(node.args, frame, '[', '])');\n\n\t        this.emit(')');\n\t    },\n\n\t    compileFilter: function(node, frame) {\n\t        var name = node.name;\n\t        this.assertType(name, nodes.Symbol);\n\t        this.emit('env.getFilter(\"' + name.value + '\").call(context, ');\n\t        this._compileAggregate(node.args, frame);\n\t        this.emit(')');\n\t    },\n\n\t    compileFilterAsync: function(node, frame) {\n\t        var name = node.name;\n\t        this.assertType(name, nodes.Symbol);\n\n\t        var symbol = node.symbol.value;\n\t        frame.set(symbol, symbol);\n\n\t        this.emit('env.getFilter(\"' + name.value + '\").call(context, ');\n\t        this._compileAggregate(node.args, frame);\n\t        this.emitLine(', ' + this.makeCallback(symbol));\n\n\t        this.addScopeLevel();\n\t    },\n\n\t    compileKeywordArgs: function(node, frame) {\n\t        var names = [];\n\n\t        lib.each(node.children, function(pair) {\n\t            names.push(pair.key.value);\n\t        });\n\n\t        this.emit('runtime.makeKeywordArgs(');\n\t        this.compileDict(node, frame);\n\t        this.emit(')');\n\t    },\n\n\t    compileSet: function(node, frame) {\n\t        var ids = [];\n\n\t        // Lookup the variable names for each identifier and create\n\t        // new ones if necessary\n\t        lib.each(node.targets, function(target) {\n\t            var name = target.value;\n\t            var id = frame.lookup(name);\n\n\t            if (id === null || id === undefined) {\n\t                id = this.tmpid();\n\n\t                // Note: This relies on js allowing scope across\n\t                // blocks, in case this is created inside an `if`\n\t                this.emitLine('var ' + id + ';');\n\t            }\n\n\t            ids.push(id);\n\t        }, this);\n\n\t        if (node.value) {\n\t          this.emit(ids.join(' = ') + ' = ');\n\t          this._compileExpression(node.value, frame);\n\t          this.emitLine(';');\n\t        }\n\t        else {\n\t          this.emit(ids.join(' = ') + ' = ');\n\t          this.compile(node.body, frame);\n\t          this.emitLine(';');\n\t        }\n\n\t        lib.each(node.targets, function(target, i) {\n\t            var id = ids[i];\n\t            var name = target.value;\n\n\t            // We are running this for every var, but it's very\n\t            // uncommon to assign to multiple vars anyway\n\t            this.emitLine('frame.set(\"' + name + '\", ' + id + ', true);');\n\n\t            this.emitLine('if(frame.topLevel) {');\n\t            this.emitLine('context.setVariable(\"' + name + '\", ' + id + ');');\n\t            this.emitLine('}');\n\n\t            if(name.charAt(0) !== '_') {\n\t                this.emitLine('if(frame.topLevel) {');\n\t                this.emitLine('context.addExport(\"' + name + '\", ' + id + ');');\n\t                this.emitLine('}');\n\t            }\n\t        }, this);\n\t    },\n\n\t    compileIf: function(node, frame, async) {\n\t        this.emit('if(');\n\t        this._compileExpression(node.cond, frame);\n\t        this.emitLine(') {');\n\n\t        this.withScopedSyntax(function() {\n\t            this.compile(node.body, frame);\n\n\t            if(async) {\n\t                this.emit('cb()');\n\t            }\n\t        });\n\n\t        if(node.else_) {\n\t            this.emitLine('}\\nelse {');\n\n\t            this.withScopedSyntax(function() {\n\t                this.compile(node.else_, frame);\n\n\t                if(async) {\n\t                    this.emit('cb()');\n\t                }\n\t            });\n\t        } else if(async) {\n\t            this.emitLine('}\\nelse {');\n\t            this.emit('cb()');\n\t        }\n\n\t        this.emitLine('}');\n\t    },\n\n\t    compileIfAsync: function(node, frame) {\n\t        this.emit('(function(cb) {');\n\t        this.compileIf(node, frame, true);\n\t        this.emit('})(' + this.makeCallback());\n\t        this.addScopeLevel();\n\t    },\n\n\t    emitLoopBindings: function(node, arr, i, len) {\n\t        var bindings = {\n\t            index: i + ' + 1',\n\t            index0: i,\n\t            revindex: len + ' - ' + i,\n\t            revindex0: len + ' - ' + i + ' - 1',\n\t            first: i + ' === 0',\n\t            last: i + ' === ' + len + ' - 1',\n\t            length: len\n\t        };\n\n\t        for (var name in bindings) {\n\t            this.emitLine('frame.set(\"loop.' + name + '\", ' + bindings[name] + ');');\n\t        }\n\t    },\n\n\t    compileFor: function(node, frame) {\n\t        // Some of this code is ugly, but it keeps the generated code\n\t        // as fast as possible. ForAsync also shares some of this, but\n\t        // not much.\n\n\t        var v;\n\t        var i = this.tmpid();\n\t        var len = this.tmpid();\n\t        var arr = this.tmpid();\n\t        frame = frame.push();\n\n\t        this.emitLine('frame = frame.push();');\n\n\t        this.emit('var ' + arr + ' = ');\n\t        this._compileExpression(node.arr, frame);\n\t        this.emitLine(';');\n\n\t        this.emit('if(' + arr + ') {');\n\n\t        // If multiple names are passed, we need to bind them\n\t        // appropriately\n\t        if(node.name instanceof nodes.Array) {\n\t            this.emitLine('var ' + i + ';');\n\n\t            // The object could be an arroy or object. Note that the\n\t            // body of the loop is duplicated for each condition, but\n\t            // we are optimizing for speed over size.\n\t            this.emitLine('if(runtime.isArray(' + arr + ')) {'); {\n\t                this.emitLine('var ' + len + ' = ' + arr + '.length;');\n\t                this.emitLine('for(' + i + '=0; ' + i + ' < ' + arr + '.length; '\n\t                              + i + '++) {');\n\n\t                // Bind each declared var\n\t                for (var u=0; u < node.name.children.length; u++) {\n\t                    var tid = this.tmpid();\n\t                    this.emitLine('var ' + tid + ' = ' + arr + '[' + i + '][' + u + ']');\n\t                    this.emitLine('frame.set(\"' + node.name.children[u].value\n\t                                  + '\", ' + arr + '[' + i + '][' + u + ']' + ');');\n\t                    frame.set(node.name.children[u].value, tid);\n\t                }\n\n\t                this.emitLoopBindings(node, arr, i, len);\n\t                this.withScopedSyntax(function() {\n\t                    this.compile(node.body, frame);\n\t                });\n\t                this.emitLine('}');\n\t            }\n\n\t            this.emitLine('} else {'); {\n\t                // Iterate over the key/values of an object\n\t                var key = node.name.children[0];\n\t                var val = node.name.children[1];\n\t                var k = this.tmpid();\n\t                v = this.tmpid();\n\t                frame.set(key.value, k);\n\t                frame.set(val.value, v);\n\n\t                this.emitLine(i + ' = -1;');\n\t                this.emitLine('var ' + len + ' = runtime.keys(' + arr + ').length;');\n\t                this.emitLine('for(var ' + k + ' in ' + arr + ') {');\n\t                this.emitLine(i + '++;');\n\t                this.emitLine('var ' + v + ' = ' + arr + '[' + k + '];');\n\t                this.emitLine('frame.set(\"' + key.value + '\", ' + k + ');');\n\t                this.emitLine('frame.set(\"' + val.value + '\", ' + v + ');');\n\n\t                this.emitLoopBindings(node, arr, i, len);\n\t                this.withScopedSyntax(function() {\n\t                    this.compile(node.body, frame);\n\t                });\n\t                this.emitLine('}');\n\t            }\n\n\t            this.emitLine('}');\n\t        }\n\t        else {\n\t            // Generate a typical array iteration\n\t            v = this.tmpid();\n\t            frame.set(node.name.value, v);\n\n\t            this.emitLine('var ' + len + ' = ' + arr + '.length;');\n\t            this.emitLine('for(var ' + i + '=0; ' + i + ' < ' + arr + '.length; ' +\n\t                          i + '++) {');\n\t            this.emitLine('var ' + v + ' = ' + arr + '[' + i + '];');\n\t            this.emitLine('frame.set(\"' + node.name.value + '\", ' + v + ');');\n\n\t            this.emitLoopBindings(node, arr, i, len);\n\n\t            this.withScopedSyntax(function() {\n\t                this.compile(node.body, frame);\n\t            });\n\n\t            this.emitLine('}');\n\t        }\n\n\t        this.emitLine('}');\n\t        if (node.else_) {\n\t          this.emitLine('if (!' + len + ') {');\n\t          this.compile(node.else_, frame);\n\t          this.emitLine('}');\n\t        }\n\n\t        this.emitLine('frame = frame.pop();');\n\t    },\n\n\t    _compileAsyncLoop: function(node, frame, parallel) {\n\t        // This shares some code with the For tag, but not enough to\n\t        // worry about. This iterates across an object asynchronously,\n\t        // but not in parallel.\n\n\t        var i = this.tmpid();\n\t        var len = this.tmpid();\n\t        var arr = this.tmpid();\n\t        var asyncMethod = parallel ? 'asyncAll' : 'asyncEach';\n\t        frame = frame.push();\n\n\t        this.emitLine('frame = frame.push();');\n\n\t        this.emit('var ' + arr + ' = ');\n\t        this._compileExpression(node.arr, frame);\n\t        this.emitLine(';');\n\n\t        if(node.name instanceof nodes.Array) {\n\t            this.emit('runtime.' + asyncMethod + '(' + arr + ', ' +\n\t                      node.name.children.length + ', function(');\n\n\t            lib.each(node.name.children, function(name) {\n\t                this.emit(name.value + ',');\n\t            }, this);\n\n\t            this.emit(i + ',' + len + ',next) {');\n\n\t            lib.each(node.name.children, function(name) {\n\t                var id = name.value;\n\t                frame.set(id, id);\n\t                this.emitLine('frame.set(\"' + id + '\", ' + id + ');');\n\t            }, this);\n\t        }\n\t        else {\n\t            var id = node.name.value;\n\t            this.emitLine('runtime.' + asyncMethod + '(' + arr + ', 1, function(' + id + ', ' + i + ', ' + len + ',next) {');\n\t            this.emitLine('frame.set(\"' + id + '\", ' + id + ');');\n\t            frame.set(id, id);\n\t        }\n\n\t        this.emitLoopBindings(node, arr, i, len);\n\n\t        this.withScopedSyntax(function() {\n\t            var buf;\n\t            if(parallel) {\n\t                buf = this.tmpid();\n\t                this.pushBufferId(buf);\n\t            }\n\n\t            this.compile(node.body, frame);\n\t            this.emitLine('next(' + i + (buf ? ',' + buf : '') + ');');\n\n\t            if(parallel) {\n\t                this.popBufferId();\n\t            }\n\t        });\n\n\t        var output = this.tmpid();\n\t        this.emitLine('}, ' + this.makeCallback(output));\n\t        this.addScopeLevel();\n\n\t        if(parallel) {\n\t            this.emitLine(this.buffer + ' += ' + output + ';');\n\t        }\n\n\t        if (node.else_) {\n\t          this.emitLine('if (!' + arr + '.length) {');\n\t          this.compile(node.else_, frame);\n\t          this.emitLine('}');\n\t        }\n\n\t        this.emitLine('frame = frame.pop();');\n\t    },\n\n\t    compileAsyncEach: function(node, frame) {\n\t        this._compileAsyncLoop(node, frame);\n\t    },\n\n\t    compileAsyncAll: function(node, frame) {\n\t        this._compileAsyncLoop(node, frame, true);\n\t    },\n\n\t    _compileMacro: function(node, frame) {\n\t        var args = [];\n\t        var kwargs = null;\n\t        var funcId = 'macro_' + this.tmpid();\n\n\t        // Type check the definition of the args\n\t        lib.each(node.args.children, function(arg, i) {\n\t            if(i === node.args.children.length - 1 &&\n\t               arg instanceof nodes.Dict) {\n\t                kwargs = arg;\n\t            }\n\t            else {\n\t                this.assertType(arg, nodes.Symbol);\n\t                args.push(arg);\n\t            }\n\t        }, this);\n\n\t        var realNames = lib.map(args, function(n) { return 'l_' + n.value; });\n\t        realNames.push('kwargs');\n\n\t        // Quoted argument names\n\t        var argNames = lib.map(args, function(n) { return '\"' + n.value + '\"'; });\n\t        var kwargNames = lib.map((kwargs && kwargs.children) || [],\n\t                                 function(n) { return '\"' + n.key.value + '\"'; });\n\n\t        // We pass a function to makeMacro which destructures the\n\t        // arguments so support setting positional args with keywords\n\t        // args and passing keyword args as positional args\n\t        // (essentially default values). See runtime.js.\n\t        frame = frame.push();\n\t        this.emitLines(\n\t            'var ' + funcId + ' = runtime.makeMacro(',\n\t            '[' + argNames.join(', ') + '], ',\n\t            '[' + kwargNames.join(', ') + '], ',\n\t            'function (' + realNames.join(', ') + ') {',\n\t            'frame = frame.push(true);',\n\t            'kwargs = kwargs || {};',\n\t            'if (kwargs.hasOwnProperty(\"caller\")) {',\n\t            'frame.set(\"caller\", kwargs.caller); }'\n\t        );\n\n\t        // Expose the arguments to the template. Don't need to use\n\t        // random names because the function\n\t        // will create a new run-time scope for us\n\t        lib.each(args, function(arg) {\n\t            this.emitLine('frame.set(\"' + arg.value + '\", ' +\n\t                          'l_' + arg.value + ');');\n\t            frame.set(arg.value, 'l_' + arg.value);\n\t        }, this);\n\n\t        // Expose the keyword arguments\n\t        if(kwargs) {\n\t            lib.each(kwargs.children, function(pair) {\n\t                var name = pair.key.value;\n\t                this.emit('frame.set(\"' + name + '\", ' +\n\t                          'kwargs.hasOwnProperty(\"' + name + '\") ? ' +\n\t                          'kwargs[\"' + name + '\"] : ');\n\t                this._compileExpression(pair.value, frame);\n\t                this.emitLine(');');\n\t            }, this);\n\t        }\n\n\t        var bufferId = this.tmpid();\n\t        this.pushBufferId(bufferId);\n\n\t        this.withScopedSyntax(function () {\n\t          this.compile(node.body, frame);\n\t        });\n\n\t        frame = frame.pop();\n\t        this.emitLine('frame = frame.pop();');\n\t        this.emitLine('return new runtime.SafeString(' + bufferId + ');');\n\t        this.emitLine('});');\n\t        this.popBufferId();\n\n\t        return funcId;\n\t    },\n\n\t    compileMacro: function(node, frame) {\n\t        var funcId = this._compileMacro(node, frame);\n\n\t        // Expose the macro to the templates\n\t        var name = node.name.value;\n\t        frame.set(name, funcId);\n\n\t        if(frame.parent) {\n\t            this.emitLine('frame.set(\"' + name + '\", ' + funcId + ');');\n\t        }\n\t        else {\n\t            if(node.name.value.charAt(0) !== '_') {\n\t                this.emitLine('context.addExport(\"' + name + '\");');\n\t            }\n\t            this.emitLine('context.setVariable(\"' + name + '\", ' + funcId + ');');\n\t        }\n\t    },\n\n\t    compileCaller: function(node, frame) {\n\t        // basically an anonymous \"macro expression\"\n\t        this.emit('(function (){');\n\t        var funcId = this._compileMacro(node, frame);\n\t        this.emit('return ' + funcId + ';})()');\n\t    },\n\n\t    compileImport: function(node, frame) {\n\t        var id = this.tmpid();\n\t        var target = node.target.value;\n\n\t        this.emit('env.getTemplate(');\n\t        this._compileExpression(node.template, frame);\n\t        this.emitLine(', false, '+this._templateName()+', false, ' + this.makeCallback(id));\n\t        this.addScopeLevel();\n\n\t        this.emitLine(id + '.getExported(' +\n\t            (node.withContext ? 'context.getVariables(), frame, ' : '') +\n\t            this.makeCallback(id));\n\t        this.addScopeLevel();\n\n\t        frame.set(target, id);\n\n\t        if(frame.parent) {\n\t            this.emitLine('frame.set(\"' + target + '\", ' + id + ');');\n\t        }\n\t        else {\n\t            this.emitLine('context.setVariable(\"' + target + '\", ' + id + ');');\n\t        }\n\t    },\n\n\t    compileFromImport: function(node, frame) {\n\t        var importedId = this.tmpid();\n\n\t        this.emit('env.getTemplate(');\n\t        this._compileExpression(node.template, frame);\n\t        this.emitLine(', false, '+this._templateName()+', false, ' + this.makeCallback(importedId));\n\t        this.addScopeLevel();\n\n\t        this.emitLine(importedId + '.getExported(' +\n\t            (node.withContext ? 'context.getVariables(), frame, ' : '') +\n\t            this.makeCallback(importedId));\n\t        this.addScopeLevel();\n\n\t        lib.each(node.names.children, function(nameNode) {\n\t            var name;\n\t            var alias;\n\t            var id = this.tmpid();\n\n\t            if(nameNode instanceof nodes.Pair) {\n\t                name = nameNode.key.value;\n\t                alias = nameNode.value.value;\n\t            }\n\t            else {\n\t                name = nameNode.value;\n\t                alias = name;\n\t            }\n\n\t            this.emitLine('if(' + importedId + '.hasOwnProperty(\"' + name + '\")) {');\n\t            this.emitLine('var ' + id + ' = ' + importedId + '.' + name + ';');\n\t            this.emitLine('} else {');\n\t            this.emitLine('cb(new Error(\"cannot import \\'' + name + '\\'\")); return;');\n\t            this.emitLine('}');\n\n\t            frame.set(alias, id);\n\n\t            if(frame.parent) {\n\t                this.emitLine('frame.set(\"' + alias + '\", ' + id + ');');\n\t            }\n\t            else {\n\t                this.emitLine('context.setVariable(\"' + alias + '\", ' + id + ');');\n\t            }\n\t        }, this);\n\t    },\n\n\t    compileBlock: function(node) {\n\t        var id = this.tmpid();\n\n\t        // If we are executing outside a block (creating a top-level\n\t        // block), we really don't want to execute its code because it\n\t        // will execute twice: once when the child template runs and\n\t        // again when the parent template runs. Note that blocks\n\t        // within blocks will *always* execute immediately *and*\n\t        // wherever else they are invoked (like used in a parent\n\t        // template). This may have behavioral differences from jinja\n\t        // because blocks can have side effects, but it seems like a\n\t        // waste of performance to always execute huge top-level\n\t        // blocks twice\n\t        if(!this.inBlock) {\n\t            this.emit('(parentTemplate ? function(e, c, f, r, cb) { cb(\"\"); } : ');\n\t        }\n\t        this.emit('context.getBlock(\"' + node.name.value + '\")');\n\t        if(!this.inBlock) {\n\t            this.emit(')');\n\t        }\n\t        this.emitLine('(env, context, frame, runtime, ' + this.makeCallback(id));\n\t        this.emitLine(this.buffer + ' += ' + id + ';');\n\t        this.addScopeLevel();\n\t    },\n\n\t    compileSuper: function(node, frame) {\n\t        var name = node.blockName.value;\n\t        var id = node.symbol.value;\n\n\t        this.emitLine('context.getSuper(env, ' +\n\t                      '\"' + name + '\", ' +\n\t                      'b_' + name + ', ' +\n\t                      'frame, runtime, '+\n\t                      this.makeCallback(id));\n\t        this.emitLine(id + ' = runtime.markSafe(' + id + ');');\n\t        this.addScopeLevel();\n\t        frame.set(id, id);\n\t    },\n\n\t    compileExtends: function(node, frame) {\n\t        var k = this.tmpid();\n\n\t        this.emit('env.getTemplate(');\n\t        this._compileExpression(node.template, frame);\n\t        this.emitLine(', true, '+this._templateName()+', false, ' + this.makeCallback('_parentTemplate'));\n\n\t        // extends is a dynamic tag and can occur within a block like\n\t        // `if`, so if this happens we need to capture the parent\n\t        // template in the top-level scope\n\t        this.emitLine('parentTemplate = _parentTemplate');\n\n\t        this.emitLine('for(var ' + k + ' in parentTemplate.blocks) {');\n\t        this.emitLine('context.addBlock(' + k +\n\t                      ', parentTemplate.blocks[' + k + ']);');\n\t        this.emitLine('}');\n\n\t        this.addScopeLevel();\n\t    },\n\n\t    compileInclude: function(node, frame) {\n\t        var id = this.tmpid();\n\t        var id2 = this.tmpid();\n\n\t        this.emit('env.getTemplate(');\n\t        this._compileExpression(node.template, frame);\n\t        this.emitLine(', false, '+this._templateName()+', ' + node.ignoreMissing + ', ' + this.makeCallback(id));\n\t        this.addScopeLevel();\n\n\t        this.emitLine(id + '.render(' +\n\t                      'context.getVariables(), frame, ' + this.makeCallback(id2));\n\t        this.emitLine(this.buffer + ' += ' + id2);\n\t        this.addScopeLevel();\n\t    },\n\n\t    compileTemplateData: function(node, frame) {\n\t        this.compileLiteral(node, frame);\n\t    },\n\n\t    compileCapture: function(node, frame) {\n\t        this.emitLine('(function() {');\n\t        this.emitLine('var output = \"\";');\n\t        this.withScopedSyntax(function () {\n\t            this.compile(node.body, frame);\n\t        });\n\t        this.emitLine('return output;');\n\t        this.emitLine('})()');\n\t    },\n\n\t    compileOutput: function(node, frame) {\n\t        var children = node.children;\n\t        for(var i=0, l=children.length; i<l; i++) {\n\t            // TemplateData is a special case because it is never\n\t            // autoescaped, so simply output it for optimization\n\t            if(children[i] instanceof nodes.TemplateData) {\n\t                if(children[i].value) {\n\t                    this.emit(this.buffer + ' += ');\n\t                    this.compileLiteral(children[i], frame);\n\t                    this.emitLine(';');\n\t                }\n\t            }\n\t            else {\n\t                this.emit(this.buffer + ' += runtime.suppressValue(');\n\t                if(this.throwOnUndefined) {\n\t                    this.emit('runtime.ensureDefined(');\n\t                }\n\t                this.compile(children[i], frame);\n\t                if(this.throwOnUndefined) {\n\t                    this.emit(',' + node.lineno + ',' + node.colno + ')');\n\t                }\n\t                this.emit(', env.opts.autoescape);\\n');\n\t            }\n\t        }\n\t    },\n\n\t    compileRoot: function(node, frame) {\n\t        if(frame) {\n\t            this.fail('compileRoot: root node can\\'t have frame');\n\t        }\n\n\t        frame = new Frame();\n\n\t        this.emitFuncBegin('root');\n\t        this.emitLine('var parentTemplate = null;');\n\t        this._compileChildren(node, frame);\n\t        this.emitLine('if(parentTemplate) {');\n\t        this.emitLine('parentTemplate.rootRenderFunc(env, context, frame, runtime, cb);');\n\t        this.emitLine('} else {');\n\t        this.emitLine('cb(null, ' + this.buffer +');');\n\t        this.emitLine('}');\n\t        this.emitFuncEnd(true);\n\n\t        this.inBlock = true;\n\n\t        var blockNames = [];\n\n\t        var i, name, block, blocks = node.findAll(nodes.Block);\n\t        for (i = 0; i < blocks.length; i++) {\n\t            block = blocks[i];\n\t            name = block.name.value;\n\n\t            if (blockNames.indexOf(name) !== -1) {\n\t                throw new Error('Block \"' + name + '\" defined more than once.');\n\t            }\n\t            blockNames.push(name);\n\n\t            this.emitFuncBegin('b_' + name);\n\n\t            var tmpFrame = new Frame();\n\t            this.compile(block.body, tmpFrame);\n\t            this.emitFuncEnd();\n\t        }\n\n\t        this.emitLine('return {');\n\t        for (i = 0; i < blocks.length; i++) {\n\t            block = blocks[i];\n\t            name = 'b_' + block.name.value;\n\t            this.emitLine(name + ': ' + name + ',');\n\t        }\n\t        this.emitLine('root: root\\n};');\n\t    },\n\n\t    compile: function (node, frame) {\n\t        var _compile = this['compile' + node.typename];\n\t        if(_compile) {\n\t            _compile.call(this, node, frame);\n\t        }\n\t        else {\n\t            this.fail('compile: Cannot compile node: ' + node.typename,\n\t                      node.lineno,\n\t                      node.colno);\n\t        }\n\t    },\n\n\t    getCode: function() {\n\t        return this.codebuf.join('');\n\t    }\n\t});\n\n\t// var c = new Compiler();\n\t// var src = 'hello {% filter title %}' +\n\t//     'Hello madam how are you' +\n\t//     '{% endfilter %}'\n\t// var ast = transformer.transform(parser.parse(src));\n\t// nodes.printNodes(ast);\n\t// c.compile(ast);\n\t// var tmpl = c.getCode();\n\t// console.log(tmpl);\n\n\tmodule.exports = {\n\t    compile: function(src, asyncFilters, extensions, name, opts) {\n\t        var c = new Compiler(name, opts.throwOnUndefined);\n\n\t        // Run the extension preprocessors against the source.\n\t        if(extensions && extensions.length) {\n\t            for(var i=0; i<extensions.length; i++) {\n\t                if('preprocess' in extensions[i]) {\n\t                    src = extensions[i].preprocess(src, name);\n\t                }\n\t            }\n\t        }\n\n\t        c.compile(transformer.transform(\n\t            parser.parse(src,\n\t                         extensions,\n\t                         opts),\n\t            asyncFilters,\n\t            name\n\t        ));\n\t        return c.getCode();\n\t    },\n\n\t    Compiler: Compiler\n\t};\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar lexer = __webpack_require__(9);\n\tvar nodes = __webpack_require__(10);\n\t// jshint -W079\n\tvar Object = __webpack_require__(6);\n\tvar lib = __webpack_require__(1);\n\n\tvar Parser = Object.extend({\n\t    init: function (tokens) {\n\t        this.tokens = tokens;\n\t        this.peeked = null;\n\t        this.breakOnBlocks = null;\n\t        this.dropLeadingWhitespace = false;\n\n\t        this.extensions = [];\n\t    },\n\n\t    nextToken: function (withWhitespace) {\n\t        var tok;\n\n\t        if(this.peeked) {\n\t            if(!withWhitespace && this.peeked.type === lexer.TOKEN_WHITESPACE) {\n\t                this.peeked = null;\n\t            }\n\t            else {\n\t                tok = this.peeked;\n\t                this.peeked = null;\n\t                return tok;\n\t            }\n\t        }\n\n\t        tok = this.tokens.nextToken();\n\n\t        if(!withWhitespace) {\n\t            while(tok && tok.type === lexer.TOKEN_WHITESPACE) {\n\t                tok = this.tokens.nextToken();\n\t            }\n\t        }\n\n\t        return tok;\n\t    },\n\n\t    peekToken: function () {\n\t        this.peeked = this.peeked || this.nextToken();\n\t        return this.peeked;\n\t    },\n\n\t    pushToken: function(tok) {\n\t        if(this.peeked) {\n\t            throw new Error('pushToken: can only push one token on between reads');\n\t        }\n\t        this.peeked = tok;\n\t    },\n\n\t    fail: function (msg, lineno, colno) {\n\t        if((lineno === undefined || colno === undefined) && this.peekToken()) {\n\t            var tok = this.peekToken();\n\t            lineno = tok.lineno;\n\t            colno = tok.colno;\n\t        }\n\t        if (lineno !== undefined) lineno += 1;\n\t        if (colno !== undefined) colno += 1;\n\n\t        throw new lib.TemplateError(msg, lineno, colno);\n\t    },\n\n\t    skip: function(type) {\n\t        var tok = this.nextToken();\n\t        if(!tok || tok.type !== type) {\n\t            this.pushToken(tok);\n\t            return false;\n\t        }\n\t        return true;\n\t    },\n\n\t    expect: function(type) {\n\t        var tok = this.nextToken();\n\t        if(tok.type !== type) {\n\t            this.fail('expected ' + type + ', got ' + tok.type,\n\t                      tok.lineno,\n\t                      tok.colno);\n\t        }\n\t        return tok;\n\t    },\n\n\t    skipValue: function(type, val) {\n\t        var tok = this.nextToken();\n\t        if(!tok || tok.type !== type || tok.value !== val) {\n\t            this.pushToken(tok);\n\t            return false;\n\t        }\n\t        return true;\n\t    },\n\n\t    skipSymbol: function(val) {\n\t        return this.skipValue(lexer.TOKEN_SYMBOL, val);\n\t    },\n\n\t    advanceAfterBlockEnd: function(name) {\n\t        var tok;\n\t        if(!name) {\n\t            tok = this.peekToken();\n\n\t            if(!tok) {\n\t                this.fail('unexpected end of file');\n\t            }\n\n\t            if(tok.type !== lexer.TOKEN_SYMBOL) {\n\t                this.fail('advanceAfterBlockEnd: expected symbol token or ' +\n\t                          'explicit name to be passed');\n\t            }\n\n\t            name = this.nextToken().value;\n\t        }\n\n\t        tok = this.nextToken();\n\n\t        if(tok && tok.type === lexer.TOKEN_BLOCK_END) {\n\t            if(tok.value.charAt(0) === '-') {\n\t                this.dropLeadingWhitespace = true;\n\t            }\n\t        }\n\t        else {\n\t            this.fail('expected block end in ' + name + ' statement');\n\t        }\n\n\t        return tok;\n\t    },\n\n\t    advanceAfterVariableEnd: function() {\n\t        if(!this.skip(lexer.TOKEN_VARIABLE_END)) {\n\t            this.fail('expected variable end');\n\t        }\n\t    },\n\n\t    parseFor: function() {\n\t        var forTok = this.peekToken();\n\t        var node;\n\t        var endBlock;\n\n\t        if(this.skipSymbol('for')) {\n\t            node = new nodes.For(forTok.lineno, forTok.colno);\n\t            endBlock = 'endfor';\n\t        }\n\t        else if(this.skipSymbol('asyncEach')) {\n\t            node = new nodes.AsyncEach(forTok.lineno, forTok.colno);\n\t            endBlock = 'endeach';\n\t        }\n\t        else if(this.skipSymbol('asyncAll')) {\n\t            node = new nodes.AsyncAll(forTok.lineno, forTok.colno);\n\t            endBlock = 'endall';\n\t        }\n\t        else {\n\t            this.fail('parseFor: expected for{Async}', forTok.lineno, forTok.colno);\n\t        }\n\n\t        node.name = this.parsePrimary();\n\n\t        if(!(node.name instanceof nodes.Symbol)) {\n\t            this.fail('parseFor: variable name expected for loop');\n\t        }\n\n\t        var type = this.peekToken().type;\n\t        if(type === lexer.TOKEN_COMMA) {\n\t            // key/value iteration\n\t            var key = node.name;\n\t            node.name = new nodes.Array(key.lineno, key.colno);\n\t            node.name.addChild(key);\n\n\t            while(this.skip(lexer.TOKEN_COMMA)) {\n\t                var prim = this.parsePrimary();\n\t                node.name.addChild(prim);\n\t            }\n\t        }\n\n\t        if(!this.skipSymbol('in')) {\n\t            this.fail('parseFor: expected \"in\" keyword for loop',\n\t                      forTok.lineno,\n\t                      forTok.colno);\n\t        }\n\n\t        node.arr = this.parseExpression();\n\t        this.advanceAfterBlockEnd(forTok.value);\n\n\t        node.body = this.parseUntilBlocks(endBlock, 'else');\n\n\t        if(this.skipSymbol('else')) {\n\t            this.advanceAfterBlockEnd('else');\n\t            node.else_ = this.parseUntilBlocks(endBlock);\n\t        }\n\n\t        this.advanceAfterBlockEnd();\n\n\t        return node;\n\t    },\n\n\t    parseMacro: function() {\n\t        var macroTok = this.peekToken();\n\t        if(!this.skipSymbol('macro')) {\n\t            this.fail('expected macro');\n\t        }\n\n\t        var name = this.parsePrimary(true);\n\t        var args = this.parseSignature();\n\t        var node = new nodes.Macro(macroTok.lineno,\n\t                                   macroTok.colno,\n\t                                   name,\n\t                                   args);\n\n\t        this.advanceAfterBlockEnd(macroTok.value);\n\t        node.body = this.parseUntilBlocks('endmacro');\n\t        this.advanceAfterBlockEnd();\n\n\t        return node;\n\t    },\n\n\t    parseCall: function() {\n\t        // a call block is parsed as a normal FunCall, but with an added\n\t        // 'caller' kwarg which is a Caller node.\n\t        var callTok = this.peekToken();\n\t        if(!this.skipSymbol('call')) {\n\t            this.fail('expected call');\n\t        }\n\n\t        var callerArgs = this.parseSignature(true) || new nodes.NodeList();\n\t        var macroCall = this.parsePrimary();\n\n\t        this.advanceAfterBlockEnd(callTok.value);\n\t        var body = this.parseUntilBlocks('endcall');\n\t        this.advanceAfterBlockEnd();\n\n\t        var callerName = new nodes.Symbol(callTok.lineno,\n\t                                          callTok.colno,\n\t                                          'caller');\n\t        var callerNode = new nodes.Caller(callTok.lineno,\n\t                                          callTok.colno,\n\t                                          callerName,\n\t                                          callerArgs,\n\t                                          body);\n\n\t        // add the additional caller kwarg, adding kwargs if necessary\n\t        var args = macroCall.args.children;\n\t        if (!(args[args.length-1] instanceof nodes.KeywordArgs)) {\n\t          args.push(new nodes.KeywordArgs());\n\t        }\n\t        var kwargs = args[args.length - 1];\n\t        kwargs.addChild(new nodes.Pair(callTok.lineno,\n\t                                       callTok.colno,\n\t                                       callerName,\n\t                                       callerNode));\n\n\t        return new nodes.Output(callTok.lineno,\n\t                                callTok.colno,\n\t                                [macroCall]);\n\t    },\n\n\t    parseWithContext: function() {\n\t        var tok = this.peekToken();\n\n\t        var withContext = null;\n\n\t        if(this.skipSymbol('with')) {\n\t            withContext = true;\n\t        }\n\t        else if(this.skipSymbol('without')) {\n\t            withContext = false;\n\t        }\n\n\t        if(withContext !== null) {\n\t            if(!this.skipSymbol('context')) {\n\t                this.fail('parseFrom: expected context after with/without',\n\t                            tok.lineno,\n\t                            tok.colno);\n\t            }\n\t        }\n\n\t        return withContext;\n\t    },\n\n\t    parseImport: function() {\n\t        var importTok = this.peekToken();\n\t        if(!this.skipSymbol('import')) {\n\t            this.fail('parseImport: expected import',\n\t                      importTok.lineno,\n\t                      importTok.colno);\n\t        }\n\n\t        var template = this.parseExpression();\n\n\t        if(!this.skipSymbol('as')) {\n\t            this.fail('parseImport: expected \"as\" keyword',\n\t                            importTok.lineno,\n\t                            importTok.colno);\n\t        }\n\n\t        var target = this.parseExpression();\n\n\t        var withContext = this.parseWithContext();\n\n\t        var node = new nodes.Import(importTok.lineno,\n\t                                    importTok.colno,\n\t                                    template,\n\t                                    target,\n\t                                    withContext);\n\n\t        this.advanceAfterBlockEnd(importTok.value);\n\n\t        return node;\n\t    },\n\n\t    parseFrom: function() {\n\t        var fromTok = this.peekToken();\n\t        if(!this.skipSymbol('from')) {\n\t            this.fail('parseFrom: expected from');\n\t        }\n\n\t        var template = this.parseExpression();\n\n\t        if(!this.skipSymbol('import')) {\n\t            this.fail('parseFrom: expected import',\n\t                            fromTok.lineno,\n\t                            fromTok.colno);\n\t        }\n\n\t        var names = new nodes.NodeList(),\n\t            withContext;\n\n\t        while(1) {\n\t            var nextTok = this.peekToken();\n\t            if(nextTok.type === lexer.TOKEN_BLOCK_END) {\n\t                if(!names.children.length) {\n\t                    this.fail('parseFrom: Expected at least one import name',\n\t                              fromTok.lineno,\n\t                              fromTok.colno);\n\t                }\n\n\t                // Since we are manually advancing past the block end,\n\t                // need to keep track of whitespace control (normally\n\t                // this is done in `advanceAfterBlockEnd`\n\t                if(nextTok.value.charAt(0) === '-') {\n\t                    this.dropLeadingWhitespace = true;\n\t                }\n\n\t                this.nextToken();\n\t                break;\n\t            }\n\n\t            if(names.children.length > 0 && !this.skip(lexer.TOKEN_COMMA)) {\n\t                this.fail('parseFrom: expected comma',\n\t                                fromTok.lineno,\n\t                                fromTok.colno);\n\t            }\n\n\t            var name = this.parsePrimary();\n\t            if(name.value.charAt(0) === '_') {\n\t                this.fail('parseFrom: names starting with an underscore ' +\n\t                          'cannot be imported',\n\t                          name.lineno,\n\t                          name.colno);\n\t            }\n\n\t            if(this.skipSymbol('as')) {\n\t                var alias = this.parsePrimary();\n\t                names.addChild(new nodes.Pair(name.lineno,\n\t                                              name.colno,\n\t                                              name,\n\t                                              alias));\n\t            }\n\t            else {\n\t                names.addChild(name);\n\t            }\n\n\t            withContext = this.parseWithContext();\n\t        }\n\n\t        return new nodes.FromImport(fromTok.lineno,\n\t                                    fromTok.colno,\n\t                                    template,\n\t                                    names,\n\t                                    withContext);\n\t    },\n\n\t    parseBlock: function() {\n\t        var tag = this.peekToken();\n\t        if(!this.skipSymbol('block')) {\n\t            this.fail('parseBlock: expected block', tag.lineno, tag.colno);\n\t        }\n\n\t        var node = new nodes.Block(tag.lineno, tag.colno);\n\n\t        node.name = this.parsePrimary();\n\t        if(!(node.name instanceof nodes.Symbol)) {\n\t            this.fail('parseBlock: variable name expected',\n\t                      tag.lineno,\n\t                      tag.colno);\n\t        }\n\n\t        this.advanceAfterBlockEnd(tag.value);\n\n\t        node.body = this.parseUntilBlocks('endblock');\n\t        this.skipSymbol('endblock');\n\t        this.skipSymbol(node.name.value);\n\n\t        var tok = this.peekToken();\n\t        if(!tok) {\n\t            this.fail('parseBlock: expected endblock, got end of file');\n\t        }\n\n\t        this.advanceAfterBlockEnd(tok.value);\n\n\t        return node;\n\t    },\n\n\t    parseExtends: function() {\n\t        var tagName = 'extends';\n\t        var tag = this.peekToken();\n\t        if(!this.skipSymbol(tagName)) {\n\t            this.fail('parseTemplateRef: expected '+ tagName);\n\t        }\n\n\t        var node = new nodes.Extends(tag.lineno, tag.colno);\n\t        node.template = this.parseExpression();\n\n\t        this.advanceAfterBlockEnd(tag.value);\n\t        return node;\n\t    },\n\n\t    parseInclude: function() {\n\t        var tagName = 'include';\n\t        var tag = this.peekToken();\n\t        if(!this.skipSymbol(tagName)) {\n\t            this.fail('parseInclude: expected '+ tagName);\n\t        }\n\n\t        var node = new nodes.Include(tag.lineno, tag.colno);\n\t        node.template = this.parseExpression();\n\n\t        if(this.skipSymbol('ignore') && this.skipSymbol('missing')) {\n\t            node.ignoreMissing = true;\n\t        }\n\n\t        this.advanceAfterBlockEnd(tag.value);\n\t        return node;\n\t    },\n\n\t    parseIf: function() {\n\t        var tag = this.peekToken();\n\t        var node;\n\n\t        if(this.skipSymbol('if') || this.skipSymbol('elif') || this.skipSymbol('elseif')) {\n\t            node = new nodes.If(tag.lineno, tag.colno);\n\t        }\n\t        else if(this.skipSymbol('ifAsync')) {\n\t            node = new nodes.IfAsync(tag.lineno, tag.colno);\n\t        }\n\t        else {\n\t            this.fail('parseIf: expected if, elif, or elseif',\n\t                      tag.lineno,\n\t                      tag.colno);\n\t        }\n\n\t        node.cond = this.parseExpression();\n\t        this.advanceAfterBlockEnd(tag.value);\n\n\t        node.body = this.parseUntilBlocks('elif', 'elseif', 'else', 'endif');\n\t        var tok = this.peekToken();\n\n\t        switch(tok && tok.value) {\n\t        case 'elseif':\n\t        case 'elif':\n\t            node.else_ = this.parseIf();\n\t            break;\n\t        case 'else':\n\t            this.advanceAfterBlockEnd();\n\t            node.else_ = this.parseUntilBlocks('endif');\n\t            this.advanceAfterBlockEnd();\n\t            break;\n\t        case 'endif':\n\t            node.else_ = null;\n\t            this.advanceAfterBlockEnd();\n\t            break;\n\t        default:\n\t            this.fail('parseIf: expected elif, else, or endif, ' +\n\t                      'got end of file');\n\t        }\n\n\t        return node;\n\t    },\n\n\t    parseSet: function() {\n\t        var tag = this.peekToken();\n\t        if(!this.skipSymbol('set')) {\n\t            this.fail('parseSet: expected set', tag.lineno, tag.colno);\n\t        }\n\n\t        var node = new nodes.Set(tag.lineno, tag.colno, []);\n\n\t        var target;\n\t        while((target = this.parsePrimary())) {\n\t            node.targets.push(target);\n\n\t            if(!this.skip(lexer.TOKEN_COMMA)) {\n\t                break;\n\t            }\n\t        }\n\n\t        if(!this.skipValue(lexer.TOKEN_OPERATOR, '=')) {\n\t            if (!this.skip(lexer.TOKEN_BLOCK_END)) {\n\t                this.fail('parseSet: expected = or block end in set tag',\n\t                          tag.lineno,\n\t                          tag.colno);\n\t            }\n\t            else {\n\t                node.body = new nodes.Capture(\n\t                    tag.lineno,\n\t                    tag.colno,\n\t                    this.parseUntilBlocks('endset')\n\t                );\n\t                node.value = null;\n\t                this.advanceAfterBlockEnd();\n\t            }\n\t        }\n\t        else {\n\t            node.value = this.parseExpression();\n\t            this.advanceAfterBlockEnd(tag.value);\n\t        }\n\n\t        return node;\n\t    },\n\n\t    parseStatement: function () {\n\t        var tok = this.peekToken();\n\t        var node;\n\n\t        if(tok.type !== lexer.TOKEN_SYMBOL) {\n\t            this.fail('tag name expected', tok.lineno, tok.colno);\n\t        }\n\n\t        if(this.breakOnBlocks &&\n\t           lib.indexOf(this.breakOnBlocks, tok.value) !== -1) {\n\t            return null;\n\t        }\n\n\t        switch(tok.value) {\n\t        case 'raw': return this.parseRaw();\n\t        case 'if':\n\t        case 'ifAsync':\n\t            return this.parseIf();\n\t        case 'for':\n\t        case 'asyncEach':\n\t        case 'asyncAll':\n\t            return this.parseFor();\n\t        case 'block': return this.parseBlock();\n\t        case 'extends': return this.parseExtends();\n\t        case 'include': return this.parseInclude();\n\t        case 'set': return this.parseSet();\n\t        case 'macro': return this.parseMacro();\n\t        case 'call': return this.parseCall();\n\t        case 'import': return this.parseImport();\n\t        case 'from': return this.parseFrom();\n\t        case 'filter': return this.parseFilterStatement();\n\t        default:\n\t            if (this.extensions.length) {\n\t                for (var i = 0; i < this.extensions.length; i++) {\n\t                    var ext = this.extensions[i];\n\t                    if (lib.indexOf(ext.tags || [], tok.value) !== -1) {\n\t                        return ext.parse(this, nodes, lexer);\n\t                    }\n\t                }\n\t            }\n\t            this.fail('unknown block tag: ' + tok.value, tok.lineno, tok.colno);\n\t        }\n\n\t        return node;\n\t    },\n\n\t    parseRaw: function() {\n\t        // Look for upcoming raw blocks (ignore all other kinds of blocks)\n\t        var rawBlockRegex = /([\\s\\S]*?){%\\s*(raw|endraw)\\s*(?=%})%}/;\n\t        var rawLevel = 1;\n\t        var str = '';\n\t        var matches = null;\n\n\t        // Skip opening raw token\n\t        // Keep this token to track line and column numbers\n\t        var begun = this.advanceAfterBlockEnd();\n\n\t        // Exit when there's nothing to match\n\t        // or when we've found the matching \"endraw\" block\n\t        while((matches = this.tokens._extractRegex(rawBlockRegex)) && rawLevel > 0) {\n\t            var all = matches[0];\n\t            var pre = matches[1];\n\t            var blockName = matches[2];\n\n\t            // Adjust rawlevel\n\t            if(blockName === 'raw') {\n\t                rawLevel += 1;\n\t            } else if(blockName === 'endraw') {\n\t                rawLevel -= 1;\n\t            }\n\n\t            // Add to str\n\t            if(rawLevel === 0) {\n\t                // We want to exclude the last \"endraw\"\n\t                str += pre;\n\t                // Move tokenizer to beginning of endraw block\n\t                this.tokens.backN(all.length - pre.length);\n\t            } else {\n\t                str += all;\n\t            }\n\t        }\n\n\t        return new nodes.Output(\n\t            begun.lineno,\n\t            begun.colno,\n\t            [new nodes.TemplateData(begun.lineno, begun.colno, str)]\n\t        );\n\t    },\n\n\t    parsePostfix: function(node) {\n\t        var lookup, tok = this.peekToken();\n\n\t        while(tok) {\n\t            if(tok.type === lexer.TOKEN_LEFT_PAREN) {\n\t                // Function call\n\t                node = new nodes.FunCall(tok.lineno,\n\t                                         tok.colno,\n\t                                         node,\n\t                                         this.parseSignature());\n\t            }\n\t            else if(tok.type === lexer.TOKEN_LEFT_BRACKET) {\n\t                // Reference\n\t                lookup = this.parseAggregate();\n\t                if(lookup.children.length > 1) {\n\t                    this.fail('invalid index');\n\t                }\n\n\t                node =  new nodes.LookupVal(tok.lineno,\n\t                                            tok.colno,\n\t                                            node,\n\t                                            lookup.children[0]);\n\t            }\n\t            else if(tok.type === lexer.TOKEN_OPERATOR && tok.value === '.') {\n\t                // Reference\n\t                this.nextToken();\n\t                var val = this.nextToken();\n\n\t                if(val.type !== lexer.TOKEN_SYMBOL) {\n\t                    this.fail('expected name as lookup value, got ' + val.value,\n\t                              val.lineno,\n\t                              val.colno);\n\t                }\n\n\t                // Make a literal string because it's not a variable\n\t                // reference\n\t                lookup = new nodes.Literal(val.lineno,\n\t                                               val.colno,\n\t                                               val.value);\n\n\t                node =  new nodes.LookupVal(tok.lineno,\n\t                                            tok.colno,\n\t                                            node,\n\t                                            lookup);\n\t            }\n\t            else {\n\t                break;\n\t            }\n\n\t            tok = this.peekToken();\n\t        }\n\n\t        return node;\n\t    },\n\n\t    parseExpression: function() {\n\t        var node = this.parseInlineIf();\n\t        return node;\n\t    },\n\n\t    parseInlineIf: function() {\n\t        var node = this.parseOr();\n\t        if(this.skipSymbol('if')) {\n\t            var cond_node = this.parseOr();\n\t            var body_node = node;\n\t            node = new nodes.InlineIf(node.lineno, node.colno);\n\t            node.body = body_node;\n\t            node.cond = cond_node;\n\t            if(this.skipSymbol('else')) {\n\t                node.else_ = this.parseOr();\n\t            } else {\n\t                node.else_ = null;\n\t            }\n\t        }\n\n\t        return node;\n\t    },\n\n\t    parseOr: function() {\n\t        var node = this.parseAnd();\n\t        while(this.skipSymbol('or')) {\n\t            var node2 = this.parseAnd();\n\t            node = new nodes.Or(node.lineno,\n\t                                node.colno,\n\t                                node,\n\t                                node2);\n\t        }\n\t        return node;\n\t    },\n\n\t    parseAnd: function() {\n\t        var node = this.parseNot();\n\t        while(this.skipSymbol('and')) {\n\t            var node2 = this.parseNot();\n\t            node = new nodes.And(node.lineno,\n\t                                 node.colno,\n\t                                 node,\n\t                                 node2);\n\t        }\n\t        return node;\n\t    },\n\n\t    parseNot: function() {\n\t        var tok = this.peekToken();\n\t        if(this.skipSymbol('not')) {\n\t            return new nodes.Not(tok.lineno,\n\t                                 tok.colno,\n\t                                 this.parseNot());\n\t        }\n\t        return this.parseIn();\n\t    },\n\n\t    parseIn: function() {\n\t      var node = this.parseCompare();\n\t      while(1) {\n\t        // check if the next token is 'not'\n\t        var tok = this.nextToken();\n\t        if (!tok) { break; }\n\t        var invert = tok.type === lexer.TOKEN_SYMBOL && tok.value === 'not';\n\t        // if it wasn't 'not', put it back\n\t        if (!invert) { this.pushToken(tok); }\n\t        if (this.skipSymbol('in')) {\n\t          var node2 = this.parseCompare();\n\t          node = new nodes.In(node.lineno,\n\t                              node.colno,\n\t                              node,\n\t                              node2);\n\t          if (invert) {\n\t            node = new nodes.Not(node.lineno,\n\t                                 node.colno,\n\t                                 node);\n\t          }\n\t        }\n\t        else {\n\t          // if we'd found a 'not' but this wasn't an 'in', put back the 'not'\n\t          if (invert) { this.pushToken(tok); }\n\t          break;\n\t        }\n\t      }\n\t      return node;\n\t    },\n\n\t    parseCompare: function() {\n\t        var compareOps = ['==', '===', '!=', '!==', '<', '>', '<=', '>='];\n\t        var expr = this.parseConcat();\n\t        var ops = [];\n\n\t        while(1) {\n\t            var tok = this.nextToken();\n\n\t            if(!tok) {\n\t                break;\n\t            }\n\t            else if(lib.indexOf(compareOps, tok.value) !== -1) {\n\t                ops.push(new nodes.CompareOperand(tok.lineno,\n\t                                                  tok.colno,\n\t                                                  this.parseConcat(),\n\t                                                  tok.value));\n\t            }\n\t            else {\n\t                this.pushToken(tok);\n\t                break;\n\t            }\n\t        }\n\n\t        if(ops.length) {\n\t            return new nodes.Compare(ops[0].lineno,\n\t                                     ops[0].colno,\n\t                                     expr,\n\t                                     ops);\n\t        }\n\t        else {\n\t            return expr;\n\t        }\n\t    },\n\n\t    // finds the '~' for string concatenation\n\t    parseConcat: function(){\n\t        var node = this.parseAdd();\n\t        while(this.skipValue(lexer.TOKEN_TILDE, '~')) {\n\t            var node2 = this.parseAdd();\n\t            node = new nodes.Concat(node.lineno,\n\t                                 node.colno,\n\t                                 node,\n\t                                 node2);\n\t        }\n\t        return node;\n\t    },\n\n\t    parseAdd: function() {\n\t        var node = this.parseSub();\n\t        while(this.skipValue(lexer.TOKEN_OPERATOR, '+')) {\n\t            var node2 = this.parseSub();\n\t            node = new nodes.Add(node.lineno,\n\t                                 node.colno,\n\t                                 node,\n\t                                 node2);\n\t        }\n\t        return node;\n\t    },\n\n\t    parseSub: function() {\n\t        var node = this.parseMul();\n\t        while(this.skipValue(lexer.TOKEN_OPERATOR, '-')) {\n\t            var node2 = this.parseMul();\n\t            node = new nodes.Sub(node.lineno,\n\t                                 node.colno,\n\t                                 node,\n\t                                 node2);\n\t        }\n\t        return node;\n\t    },\n\n\t    parseMul: function() {\n\t        var node = this.parseDiv();\n\t        while(this.skipValue(lexer.TOKEN_OPERATOR, '*')) {\n\t            var node2 = this.parseDiv();\n\t            node = new nodes.Mul(node.lineno,\n\t                                 node.colno,\n\t                                 node,\n\t                                 node2);\n\t        }\n\t        return node;\n\t    },\n\n\t    parseDiv: function() {\n\t        var node = this.parseFloorDiv();\n\t        while(this.skipValue(lexer.TOKEN_OPERATOR, '/')) {\n\t            var node2 = this.parseFloorDiv();\n\t            node = new nodes.Div(node.lineno,\n\t                                 node.colno,\n\t                                 node,\n\t                                 node2);\n\t        }\n\t        return node;\n\t    },\n\n\t    parseFloorDiv: function() {\n\t        var node = this.parseMod();\n\t        while(this.skipValue(lexer.TOKEN_OPERATOR, '//')) {\n\t            var node2 = this.parseMod();\n\t            node = new nodes.FloorDiv(node.lineno,\n\t                                      node.colno,\n\t                                      node,\n\t                                      node2);\n\t        }\n\t        return node;\n\t    },\n\n\t    parseMod: function() {\n\t        var node = this.parsePow();\n\t        while(this.skipValue(lexer.TOKEN_OPERATOR, '%')) {\n\t            var node2 = this.parsePow();\n\t            node = new nodes.Mod(node.lineno,\n\t                                 node.colno,\n\t                                 node,\n\t                                 node2);\n\t        }\n\t        return node;\n\t    },\n\n\t    parsePow: function() {\n\t        var node = this.parseUnary();\n\t        while(this.skipValue(lexer.TOKEN_OPERATOR, '**')) {\n\t            var node2 = this.parseUnary();\n\t            node = new nodes.Pow(node.lineno,\n\t                                 node.colno,\n\t                                 node,\n\t                                 node2);\n\t        }\n\t        return node;\n\t    },\n\n\t    parseUnary: function(noFilters) {\n\t        var tok = this.peekToken();\n\t        var node;\n\n\t        if(this.skipValue(lexer.TOKEN_OPERATOR, '-')) {\n\t            node = new nodes.Neg(tok.lineno,\n\t                                 tok.colno,\n\t                                 this.parseUnary(true));\n\t        }\n\t        else if(this.skipValue(lexer.TOKEN_OPERATOR, '+')) {\n\t            node = new nodes.Pos(tok.lineno,\n\t                                 tok.colno,\n\t                                 this.parseUnary(true));\n\t        }\n\t        else {\n\t            node = this.parsePrimary();\n\t        }\n\n\t        if(!noFilters) {\n\t            node = this.parseFilter(node);\n\t        }\n\n\t        return node;\n\t    },\n\n\t    parsePrimary: function (noPostfix) {\n\t        var tok = this.nextToken();\n\t        var val;\n\t        var node = null;\n\n\t        if(!tok) {\n\t            this.fail('expected expression, got end of file');\n\t        }\n\t        else if(tok.type === lexer.TOKEN_STRING) {\n\t            val = tok.value;\n\t        }\n\t        else if(tok.type === lexer.TOKEN_INT) {\n\t            val = parseInt(tok.value, 10);\n\t        }\n\t        else if(tok.type === lexer.TOKEN_FLOAT) {\n\t            val = parseFloat(tok.value);\n\t        }\n\t        else if(tok.type === lexer.TOKEN_BOOLEAN) {\n\t            if(tok.value === 'true') {\n\t                val = true;\n\t            }\n\t            else if(tok.value === 'false') {\n\t                val = false;\n\t            }\n\t            else {\n\t                this.fail('invalid boolean: ' + tok.value,\n\t                          tok.lineno,\n\t                          tok.colno);\n\t            }\n\t        }\n\t        else if(tok.type === lexer.TOKEN_NONE) {\n\t            val = null;\n\t        }\n\t        else if (tok.type === lexer.TOKEN_REGEX) {\n\t            val = new RegExp(tok.value.body, tok.value.flags);\n\t        }\n\n\t        if(val !== undefined) {\n\t            node = new nodes.Literal(tok.lineno, tok.colno, val);\n\t        }\n\t        else if(tok.type === lexer.TOKEN_SYMBOL) {\n\t            node = new nodes.Symbol(tok.lineno, tok.colno, tok.value);\n\n\t            if(!noPostfix) {\n\t                node = this.parsePostfix(node);\n\t            }\n\t        }\n\t        else {\n\t            // See if it's an aggregate type, we need to push the\n\t            // current delimiter token back on\n\t            this.pushToken(tok);\n\t            node = this.parseAggregate();\n\t        }\n\n\t        if(node) {\n\t            return node;\n\t        }\n\t        else {\n\t            this.fail('unexpected token: ' + tok.value,\n\t                      tok.lineno,\n\t                      tok.colno);\n\t        }\n\t    },\n\n\t    parseFilterName: function() {\n\t        var tok = this.expect(lexer.TOKEN_SYMBOL);\n\t        var name = tok.value;\n\n\t        while(this.skipValue(lexer.TOKEN_OPERATOR, '.')) {\n\t            name += '.' + this.expect(lexer.TOKEN_SYMBOL).value;\n\t        }\n\n\t        return new nodes.Symbol(tok.lineno, tok.colno, name);\n\t    },\n\n\t    parseFilterArgs: function(node) {\n\t        if(this.peekToken().type === lexer.TOKEN_LEFT_PAREN) {\n\t            // Get a FunCall node and add the parameters to the\n\t            // filter\n\t            var call = this.parsePostfix(node);\n\t            return call.args.children;\n\t        }\n\t        return [];\n\t    },\n\n\t    parseFilter: function(node) {\n\t        while(this.skip(lexer.TOKEN_PIPE)) {\n\t            var name = this.parseFilterName();\n\n\t            node = new nodes.Filter(\n\t                name.lineno,\n\t                name.colno,\n\t                name,\n\t                new nodes.NodeList(\n\t                    name.lineno,\n\t                    name.colno,\n\t                    [node].concat(this.parseFilterArgs(node))\n\t                )\n\t            );\n\t        }\n\n\t        return node;\n\t    },\n\n\t    parseFilterStatement: function() {\n\t        var filterTok = this.peekToken();\n\t        if(!this.skipSymbol('filter')) {\n\t            this.fail('parseFilterStatement: expected filter');\n\t        }\n\n\t        var name = this.parseFilterName();\n\t        var args = this.parseFilterArgs(name);\n\n\t        this.advanceAfterBlockEnd(filterTok.value);\n\t        var body = new nodes.Capture(\n\t            name.lineno,\n\t            name.colno,\n\t            this.parseUntilBlocks('endfilter')\n\t        );\n\t        this.advanceAfterBlockEnd();\n\n\t        var node = new nodes.Filter(\n\t            name.lineno,\n\t            name.colno,\n\t            name,\n\t            new nodes.NodeList(\n\t                name.lineno,\n\t                name.colno,\n\t                [body].concat(args)\n\t            )\n\t        );\n\n\t        return new nodes.Output(\n\t            name.lineno,\n\t            name.colno,\n\t            [node]\n\t        );\n\t    },\n\n\t    parseAggregate: function() {\n\t        var tok = this.nextToken();\n\t        var node;\n\n\t        switch(tok.type) {\n\t        case lexer.TOKEN_LEFT_PAREN:\n\t            node = new nodes.Group(tok.lineno, tok.colno); break;\n\t        case lexer.TOKEN_LEFT_BRACKET:\n\t            node = new nodes.Array(tok.lineno, tok.colno); break;\n\t        case lexer.TOKEN_LEFT_CURLY:\n\t            node = new nodes.Dict(tok.lineno, tok.colno); break;\n\t        default:\n\t            return null;\n\t        }\n\n\t        while(1) {\n\t            var type = this.peekToken().type;\n\t            if(type === lexer.TOKEN_RIGHT_PAREN ||\n\t               type === lexer.TOKEN_RIGHT_BRACKET ||\n\t               type === lexer.TOKEN_RIGHT_CURLY) {\n\t                this.nextToken();\n\t                break;\n\t            }\n\n\t            if(node.children.length > 0) {\n\t                if(!this.skip(lexer.TOKEN_COMMA)) {\n\t                    this.fail('parseAggregate: expected comma after expression',\n\t                              tok.lineno,\n\t                              tok.colno);\n\t                }\n\t            }\n\n\t            if(node instanceof nodes.Dict) {\n\t                // TODO: check for errors\n\t                var key = this.parsePrimary();\n\n\t                // We expect a key/value pair for dicts, separated by a\n\t                // colon\n\t                if(!this.skip(lexer.TOKEN_COLON)) {\n\t                    this.fail('parseAggregate: expected colon after dict key',\n\t                        tok.lineno,\n\t                        tok.colno);\n\t                }\n\n\t                // TODO: check for errors\n\t                var value = this.parseExpression();\n\t                node.addChild(new nodes.Pair(key.lineno,\n\t                                             key.colno,\n\t                                             key,\n\t                                             value));\n\t            }\n\t            else {\n\t                // TODO: check for errors\n\t                var expr = this.parseExpression();\n\t                node.addChild(expr);\n\t            }\n\t        }\n\n\t        return node;\n\t    },\n\n\t    parseSignature: function(tolerant, noParens) {\n\t        var tok = this.peekToken();\n\t        if(!noParens && tok.type !== lexer.TOKEN_LEFT_PAREN) {\n\t            if(tolerant) {\n\t                return null;\n\t            }\n\t            else {\n\t                this.fail('expected arguments', tok.lineno, tok.colno);\n\t            }\n\t        }\n\n\t        if(tok.type === lexer.TOKEN_LEFT_PAREN) {\n\t            tok = this.nextToken();\n\t        }\n\n\t        var args = new nodes.NodeList(tok.lineno, tok.colno);\n\t        var kwargs = new nodes.KeywordArgs(tok.lineno, tok.colno);\n\t        var checkComma = false;\n\n\t        while(1) {\n\t            tok = this.peekToken();\n\t            if(!noParens && tok.type === lexer.TOKEN_RIGHT_PAREN) {\n\t                this.nextToken();\n\t                break;\n\t            }\n\t            else if(noParens && tok.type === lexer.TOKEN_BLOCK_END) {\n\t                break;\n\t            }\n\n\t            if(checkComma && !this.skip(lexer.TOKEN_COMMA)) {\n\t                this.fail('parseSignature: expected comma after expression',\n\t                          tok.lineno,\n\t                          tok.colno);\n\t            }\n\t            else {\n\t                var arg = this.parseExpression();\n\n\t                if(this.skipValue(lexer.TOKEN_OPERATOR, '=')) {\n\t                    kwargs.addChild(\n\t                        new nodes.Pair(arg.lineno,\n\t                                       arg.colno,\n\t                                       arg,\n\t                                       this.parseExpression())\n\t                    );\n\t                }\n\t                else {\n\t                    args.addChild(arg);\n\t                }\n\t            }\n\n\t            checkComma = true;\n\t        }\n\n\t        if(kwargs.children.length) {\n\t            args.addChild(kwargs);\n\t        }\n\n\t        return args;\n\t    },\n\n\t    parseUntilBlocks: function(/* blockNames */) {\n\t        var prev = this.breakOnBlocks;\n\t        this.breakOnBlocks = lib.toArray(arguments);\n\n\t        var ret = this.parse();\n\n\t        this.breakOnBlocks = prev;\n\t        return ret;\n\t    },\n\n\t    parseNodes: function () {\n\t        var tok;\n\t        var buf = [];\n\n\t        while((tok = this.nextToken())) {\n\t            if(tok.type === lexer.TOKEN_DATA) {\n\t                var data = tok.value;\n\t                var nextToken = this.peekToken();\n\t                var nextVal = nextToken && nextToken.value;\n\n\t                // If the last token has \"-\" we need to trim the\n\t                // leading whitespace of the data. This is marked with\n\t                // the `dropLeadingWhitespace` variable.\n\t                if(this.dropLeadingWhitespace) {\n\t                    // TODO: this could be optimized (don't use regex)\n\t                    data = data.replace(/^\\s*/, '');\n\t                    this.dropLeadingWhitespace = false;\n\t                }\n\n\t                // Same for the succeding block start token\n\t                if(nextToken &&\n\t                    ((nextToken.type === lexer.TOKEN_BLOCK_START &&\n\t                      nextVal.charAt(nextVal.length - 1) === '-') ||\n\t                    (nextToken.type === lexer.TOKEN_COMMENT &&\n\t                      nextVal.charAt(this.tokens.tags.COMMENT_START.length)\n\t                        === '-'))) {\n\t                    // TODO: this could be optimized (don't use regex)\n\t                    data = data.replace(/\\s*$/, '');\n\t                }\n\n\t                buf.push(new nodes.Output(tok.lineno,\n\t                                          tok.colno,\n\t                                          [new nodes.TemplateData(tok.lineno,\n\t                                                                  tok.colno,\n\t                                                                  data)]));\n\t            }\n\t            else if(tok.type === lexer.TOKEN_BLOCK_START) {\n\t                this.dropLeadingWhitespace = false;\n\t                var n = this.parseStatement();\n\t                if(!n) {\n\t                    break;\n\t                }\n\t                buf.push(n);\n\t            }\n\t            else if(tok.type === lexer.TOKEN_VARIABLE_START) {\n\t                var e = this.parseExpression();\n\t                this.advanceAfterVariableEnd();\n\t                this.dropLeadingWhitespace = false;\n\t                buf.push(new nodes.Output(tok.lineno, tok.colno, [e]));\n\t            }\n\t            else if(tok.type === lexer.TOKEN_COMMENT) {\n\t                this.dropLeadingWhitespace = tok.value.charAt(\n\t                    tok.value.length - this.tokens.tags.COMMENT_END.length - 1\n\t                ) === '-';\n\t            } else {\n\t                // Ignore comments, otherwise this should be an error\n\t                this.fail('Unexpected token at top-level: ' +\n\t                                tok.type, tok.lineno, tok.colno);\n\n\t            }\n\t        }\n\n\t        return buf;\n\t    },\n\n\t    parse: function() {\n\t        return new nodes.NodeList(0, 0, this.parseNodes());\n\t    },\n\n\t    parseAsRoot: function() {\n\t        return new nodes.Root(0, 0, this.parseNodes());\n\t    }\n\t});\n\n\t// var util = require('util');\n\n\t// var l = lexer.lex('{%- if x -%}\\n hello {% endif %}');\n\t// var t;\n\t// while((t = l.nextToken())) {\n\t//     console.log(util.inspect(t));\n\t// }\n\n\t// var p = new Parser(lexer.lex('hello {% filter title %}' +\n\t//                              'Hello madam how are you' +\n\t//                              '{% endfilter %}'));\n\t// var n = p.parseAsRoot();\n\t// nodes.printNodes(n);\n\n\tmodule.exports = {\n\t    parse: function(src, extensions, opts) {\n\t        var p = new Parser(lexer.lex(src, opts));\n\t        if (extensions !== undefined) {\n\t            p.extensions = extensions;\n\t        }\n\t        return p.parseAsRoot();\n\t    }\n\t};\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar lib = __webpack_require__(1);\n\n\tvar whitespaceChars = ' \\n\\t\\r\\u00A0';\n\tvar delimChars = '()[]{}%*-+~/#,:|.<>=!';\n\tvar intChars = '0123456789';\n\n\tvar BLOCK_START = '{%';\n\tvar BLOCK_END = '%}';\n\tvar VARIABLE_START = '{{';\n\tvar VARIABLE_END = '}}';\n\tvar COMMENT_START = '{#';\n\tvar COMMENT_END = '#}';\n\n\tvar TOKEN_STRING = 'string';\n\tvar TOKEN_WHITESPACE = 'whitespace';\n\tvar TOKEN_DATA = 'data';\n\tvar TOKEN_BLOCK_START = 'block-start';\n\tvar TOKEN_BLOCK_END = 'block-end';\n\tvar TOKEN_VARIABLE_START = 'variable-start';\n\tvar TOKEN_VARIABLE_END = 'variable-end';\n\tvar TOKEN_COMMENT = 'comment';\n\tvar TOKEN_LEFT_PAREN = 'left-paren';\n\tvar TOKEN_RIGHT_PAREN = 'right-paren';\n\tvar TOKEN_LEFT_BRACKET = 'left-bracket';\n\tvar TOKEN_RIGHT_BRACKET = 'right-bracket';\n\tvar TOKEN_LEFT_CURLY = 'left-curly';\n\tvar TOKEN_RIGHT_CURLY = 'right-curly';\n\tvar TOKEN_OPERATOR = 'operator';\n\tvar TOKEN_COMMA = 'comma';\n\tvar TOKEN_COLON = 'colon';\n\tvar TOKEN_TILDE = 'tilde';\n\tvar TOKEN_PIPE = 'pipe';\n\tvar TOKEN_INT = 'int';\n\tvar TOKEN_FLOAT = 'float';\n\tvar TOKEN_BOOLEAN = 'boolean';\n\tvar TOKEN_NONE = 'none';\n\tvar TOKEN_SYMBOL = 'symbol';\n\tvar TOKEN_SPECIAL = 'special';\n\tvar TOKEN_REGEX = 'regex';\n\n\tfunction token(type, value, lineno, colno) {\n\t    return {\n\t        type: type,\n\t        value: value,\n\t        lineno: lineno,\n\t        colno: colno\n\t    };\n\t}\n\n\tfunction Tokenizer(str, opts) {\n\t    this.str = str;\n\t    this.index = 0;\n\t    this.len = str.length;\n\t    this.lineno = 0;\n\t    this.colno = 0;\n\n\t    this.in_code = false;\n\n\t    opts = opts || {};\n\n\t    var tags = opts.tags || {};\n\t    this.tags = {\n\t        BLOCK_START: tags.blockStart || BLOCK_START,\n\t        BLOCK_END: tags.blockEnd || BLOCK_END,\n\t        VARIABLE_START: tags.variableStart || VARIABLE_START,\n\t        VARIABLE_END: tags.variableEnd || VARIABLE_END,\n\t        COMMENT_START: tags.commentStart || COMMENT_START,\n\t        COMMENT_END: tags.commentEnd || COMMENT_END\n\t    };\n\n\t    this.trimBlocks = !!opts.trimBlocks;\n\t    this.lstripBlocks = !!opts.lstripBlocks;\n\t}\n\n\tTokenizer.prototype.nextToken = function() {\n\t    var lineno = this.lineno;\n\t    var colno = this.colno;\n\t    var tok;\n\n\t    if(this.in_code) {\n\t        // Otherwise, if we are in a block parse it as code\n\t        var cur = this.current();\n\n\t        if(this.is_finished()) {\n\t            // We have nothing else to parse\n\t            return null;\n\t        }\n\t        else if(cur === '\"' || cur === '\\'') {\n\t            // We've hit a string\n\t            return token(TOKEN_STRING, this.parseString(cur), lineno, colno);\n\t        }\n\t        else if((tok = this._extract(whitespaceChars))) {\n\t            // We hit some whitespace\n\t            return token(TOKEN_WHITESPACE, tok, lineno, colno);\n\t        }\n\t        else if((tok = this._extractString(this.tags.BLOCK_END)) ||\n\t                (tok = this._extractString('-' + this.tags.BLOCK_END))) {\n\t            // Special check for the block end tag\n\t            //\n\t            // It is a requirement that start and end tags are composed of\n\t            // delimiter characters (%{}[] etc), and our code always\n\t            // breaks on delimiters so we can assume the token parsing\n\t            // doesn't consume these elsewhere\n\t            this.in_code = false;\n\t            if(this.trimBlocks) {\n\t                cur = this.current();\n\t                if(cur === '\\n') {\n\t                    // Skip newline\n\t                    this.forward();\n\t                }else if(cur === '\\r'){\n\t                    // Skip CRLF newline\n\t                    this.forward();\n\t                    cur = this.current();\n\t                    if(cur === '\\n'){\n\t                        this.forward();\n\t                    }else{\n\t                        // Was not a CRLF, so go back\n\t                        this.back();\n\t                    }\n\t                }\n\t            }\n\t            return token(TOKEN_BLOCK_END, tok, lineno, colno);\n\t        }\n\t        else if((tok = this._extractString(this.tags.VARIABLE_END))) {\n\t            // Special check for variable end tag (see above)\n\t            this.in_code = false;\n\t            return token(TOKEN_VARIABLE_END, tok, lineno, colno);\n\t        }\n\t        else if (cur === 'r' && this.str.charAt(this.index + 1) === '/') {\n\t            // Skip past 'r/'.\n\t            this.forwardN(2);\n\n\t            // Extract until the end of the regex -- / ends it, \\/ does not.\n\t            var regexBody = '';\n\t            while (!this.is_finished()) {\n\t                if (this.current() === '/' && this.previous() !== '\\\\') {\n\t                    this.forward();\n\t                    break;\n\t                } else {\n\t                    regexBody += this.current();\n\t                    this.forward();\n\t                }\n\t            }\n\n\t            // Check for flags.\n\t            // The possible flags are according to https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/RegExp)\n\t            var POSSIBLE_FLAGS = ['g', 'i', 'm', 'y'];\n\t            var regexFlags = '';\n\t            while (!this.is_finished()) {\n\t                var isCurrentAFlag = POSSIBLE_FLAGS.indexOf(this.current()) !== -1;\n\t                if (isCurrentAFlag) {\n\t                    regexFlags += this.current();\n\t                    this.forward();\n\t                } else {\n\t                    break;\n\t                }\n\t            }\n\n\t            return token(TOKEN_REGEX, {body: regexBody, flags: regexFlags}, lineno, colno);\n\t        }\n\t        else if(delimChars.indexOf(cur) !== -1) {\n\t            // We've hit a delimiter (a special char like a bracket)\n\t            this.forward();\n\t            var complexOps = ['==', '===', '!=', '!==', '<=', '>=', '//', '**'];\n\t            var curComplex = cur + this.current();\n\t            var type;\n\n\t            if(lib.indexOf(complexOps, curComplex) !== -1) {\n\t                this.forward();\n\t                cur = curComplex;\n\n\t                // See if this is a strict equality/inequality comparator\n\t                if(lib.indexOf(complexOps, curComplex + this.current()) !== -1) {\n\t                    cur = curComplex + this.current();\n\t                    this.forward();\n\t                }\n\t            }\n\n\t            switch(cur) {\n\t            case '(': type = TOKEN_LEFT_PAREN; break;\n\t            case ')': type = TOKEN_RIGHT_PAREN; break;\n\t            case '[': type = TOKEN_LEFT_BRACKET; break;\n\t            case ']': type = TOKEN_RIGHT_BRACKET; break;\n\t            case '{': type = TOKEN_LEFT_CURLY; break;\n\t            case '}': type = TOKEN_RIGHT_CURLY; break;\n\t            case ',': type = TOKEN_COMMA; break;\n\t            case ':': type = TOKEN_COLON; break;\n\t            case '~': type = TOKEN_TILDE; break;\n\t            case '|': type = TOKEN_PIPE; break;\n\t            default: type = TOKEN_OPERATOR;\n\t            }\n\n\t            return token(type, cur, lineno, colno);\n\t        }\n\t        else {\n\t            // We are not at whitespace or a delimiter, so extract the\n\t            // text and parse it\n\t            tok = this._extractUntil(whitespaceChars + delimChars);\n\n\t            if(tok.match(/^[-+]?[0-9]+$/)) {\n\t                if(this.current() === '.') {\n\t                    this.forward();\n\t                    var dec = this._extract(intChars);\n\t                    return token(TOKEN_FLOAT, tok + '.' + dec, lineno, colno);\n\t                }\n\t                else {\n\t                    return token(TOKEN_INT, tok, lineno, colno);\n\t                }\n\t            }\n\t            else if(tok.match(/^(true|false)$/)) {\n\t                return token(TOKEN_BOOLEAN, tok, lineno, colno);\n\t            }\n\t            else if(tok === 'none') {\n\t                return token(TOKEN_NONE, tok, lineno, colno);\n\t            }\n\t            else if(tok) {\n\t                return token(TOKEN_SYMBOL, tok, lineno, colno);\n\t            }\n\t            else {\n\t                throw new Error('Unexpected value while parsing: ' + tok);\n\t            }\n\t        }\n\t    }\n\t    else {\n\t        // Parse out the template text, breaking on tag\n\t        // delimiters because we need to look for block/variable start\n\t        // tags (don't use the full delimChars for optimization)\n\t        var beginChars = (this.tags.BLOCK_START.charAt(0) +\n\t                          this.tags.VARIABLE_START.charAt(0) +\n\t                          this.tags.COMMENT_START.charAt(0) +\n\t                          this.tags.COMMENT_END.charAt(0));\n\n\t        if(this.is_finished()) {\n\t            return null;\n\t        }\n\t        else if((tok = this._extractString(this.tags.BLOCK_START + '-')) ||\n\t                (tok = this._extractString(this.tags.BLOCK_START))) {\n\t            this.in_code = true;\n\t            return token(TOKEN_BLOCK_START, tok, lineno, colno);\n\t        }\n\t        else if((tok = this._extractString(this.tags.VARIABLE_START))) {\n\t            this.in_code = true;\n\t            return token(TOKEN_VARIABLE_START, tok, lineno, colno);\n\t        }\n\t        else {\n\t            tok = '';\n\t            var data;\n\t            var in_comment = false;\n\n\t            if(this._matches(this.tags.COMMENT_START)) {\n\t                in_comment = true;\n\t                tok = this._extractString(this.tags.COMMENT_START);\n\t            }\n\n\t            // Continually consume text, breaking on the tag delimiter\n\t            // characters and checking to see if it's a start tag.\n\t            //\n\t            // We could hit the end of the template in the middle of\n\t            // our looping, so check for the null return value from\n\t            // _extractUntil\n\t            while((data = this._extractUntil(beginChars)) !== null) {\n\t                tok += data;\n\n\t                if((this._matches(this.tags.BLOCK_START) ||\n\t                    this._matches(this.tags.VARIABLE_START) ||\n\t                    this._matches(this.tags.COMMENT_START)) &&\n\t                  !in_comment) {\n\t                    if(this.lstripBlocks &&\n\t                        this._matches(this.tags.BLOCK_START) &&\n\t                        this.colno > 0 &&\n\t                        this.colno <= tok.length) {\n\t                        var lastLine = tok.slice(-this.colno);\n\t                        if(/^\\s+$/.test(lastLine)) {\n\t                            // Remove block leading whitespace from beginning of the string\n\t                            tok = tok.slice(0, -this.colno);\n\t                            if(!tok.length) {\n\t                                // All data removed, collapse to avoid unnecessary nodes\n\t                                // by returning next token (block start)\n\t                                return this.nextToken();\n\t                            }\n\t                        }\n\t                    }\n\t                    // If it is a start tag, stop looping\n\t                    break;\n\t                }\n\t                else if(this._matches(this.tags.COMMENT_END)) {\n\t                    if(!in_comment) {\n\t                        throw new Error('unexpected end of comment');\n\t                    }\n\t                    tok += this._extractString(this.tags.COMMENT_END);\n\t                    break;\n\t                }\n\t                else {\n\t                    // It does not match any tag, so add the character and\n\t                    // carry on\n\t                    tok += this.current();\n\t                    this.forward();\n\t                }\n\t            }\n\n\t            if(data === null && in_comment) {\n\t                throw new Error('expected end of comment, got end of file');\n\t            }\n\n\t            return token(in_comment ? TOKEN_COMMENT : TOKEN_DATA,\n\t                         tok,\n\t                         lineno,\n\t                         colno);\n\t        }\n\t    }\n\n\t    throw new Error('Could not parse text');\n\t};\n\n\tTokenizer.prototype.parseString = function(delimiter) {\n\t    this.forward();\n\n\t    var str = '';\n\n\t    while(!this.is_finished() && this.current() !== delimiter) {\n\t        var cur = this.current();\n\n\t        if(cur === '\\\\') {\n\t            this.forward();\n\t            switch(this.current()) {\n\t            case 'n': str += '\\n'; break;\n\t            case 't': str += '\\t'; break;\n\t            case 'r': str += '\\r'; break;\n\t            default:\n\t                str += this.current();\n\t            }\n\t            this.forward();\n\t        }\n\t        else {\n\t            str += cur;\n\t            this.forward();\n\t        }\n\t    }\n\n\t    this.forward();\n\t    return str;\n\t};\n\n\tTokenizer.prototype._matches = function(str) {\n\t    if(this.index + str.length > this.len) {\n\t        return null;\n\t    }\n\n\t    var m = this.str.slice(this.index, this.index + str.length);\n\t    return m === str;\n\t};\n\n\tTokenizer.prototype._extractString = function(str) {\n\t    if(this._matches(str)) {\n\t        this.index += str.length;\n\t        return str;\n\t    }\n\t    return null;\n\t};\n\n\tTokenizer.prototype._extractUntil = function(charString) {\n\t    // Extract all non-matching chars, with the default matching set\n\t    // to everything\n\t    return this._extractMatching(true, charString || '');\n\t};\n\n\tTokenizer.prototype._extract = function(charString) {\n\t    // Extract all matching chars (no default, so charString must be\n\t    // explicit)\n\t    return this._extractMatching(false, charString);\n\t};\n\n\tTokenizer.prototype._extractMatching = function (breakOnMatch, charString) {\n\t    // Pull out characters until a breaking char is hit.\n\t    // If breakOnMatch is false, a non-matching char stops it.\n\t    // If breakOnMatch is true, a matching char stops it.\n\n\t    if(this.is_finished()) {\n\t        return null;\n\t    }\n\n\t    var first = charString.indexOf(this.current());\n\n\t    // Only proceed if the first character doesn't meet our condition\n\t    if((breakOnMatch && first === -1) ||\n\t       (!breakOnMatch && first !== -1)) {\n\t        var t = this.current();\n\t        this.forward();\n\n\t        // And pull out all the chars one at a time until we hit a\n\t        // breaking char\n\t        var idx = charString.indexOf(this.current());\n\n\t        while(((breakOnMatch && idx === -1) ||\n\t               (!breakOnMatch && idx !== -1)) && !this.is_finished()) {\n\t            t += this.current();\n\t            this.forward();\n\n\t            idx = charString.indexOf(this.current());\n\t        }\n\n\t        return t;\n\t    }\n\n\t    return '';\n\t};\n\n\tTokenizer.prototype._extractRegex = function(regex) {\n\t    var matches = this.currentStr().match(regex);\n\t    if(!matches) {\n\t        return null;\n\t    }\n\n\t    // Move forward whatever was matched\n\t    this.forwardN(matches[0].length);\n\n\t    return matches;\n\t};\n\n\tTokenizer.prototype.is_finished = function() {\n\t    return this.index >= this.len;\n\t};\n\n\tTokenizer.prototype.forwardN = function(n) {\n\t    for(var i=0; i<n; i++) {\n\t        this.forward();\n\t    }\n\t};\n\n\tTokenizer.prototype.forward = function() {\n\t    this.index++;\n\n\t    if(this.previous() === '\\n') {\n\t        this.lineno++;\n\t        this.colno = 0;\n\t    }\n\t    else {\n\t        this.colno++;\n\t    }\n\t};\n\n\tTokenizer.prototype.backN = function(n) {\n\t    for(var i=0; i<n; i++) {\n\t        this.back();\n\t    }\n\t};\n\n\tTokenizer.prototype.back = function() {\n\t    this.index--;\n\n\t    if(this.current() === '\\n') {\n\t        this.lineno--;\n\n\t        var idx = this.src.lastIndexOf('\\n', this.index-1);\n\t        if(idx === -1) {\n\t            this.colno = this.index;\n\t        }\n\t        else {\n\t            this.colno = this.index - idx;\n\t        }\n\t    }\n\t    else {\n\t        this.colno--;\n\t    }\n\t};\n\n\t// current returns current character\n\tTokenizer.prototype.current = function() {\n\t    if(!this.is_finished()) {\n\t        return this.str.charAt(this.index);\n\t    }\n\t    return '';\n\t};\n\n\t// currentStr returns what's left of the unparsed string\n\tTokenizer.prototype.currentStr = function() {\n\t    if(!this.is_finished()) {\n\t        return this.str.substr(this.index);\n\t    }\n\t    return '';\n\t};\n\n\tTokenizer.prototype.previous = function() {\n\t    return this.str.charAt(this.index-1);\n\t};\n\n\tmodule.exports = {\n\t    lex: function(src, opts) {\n\t        return new Tokenizer(src, opts);\n\t    },\n\n\t    TOKEN_STRING: TOKEN_STRING,\n\t    TOKEN_WHITESPACE: TOKEN_WHITESPACE,\n\t    TOKEN_DATA: TOKEN_DATA,\n\t    TOKEN_BLOCK_START: TOKEN_BLOCK_START,\n\t    TOKEN_BLOCK_END: TOKEN_BLOCK_END,\n\t    TOKEN_VARIABLE_START: TOKEN_VARIABLE_START,\n\t    TOKEN_VARIABLE_END: TOKEN_VARIABLE_END,\n\t    TOKEN_COMMENT: TOKEN_COMMENT,\n\t    TOKEN_LEFT_PAREN: TOKEN_LEFT_PAREN,\n\t    TOKEN_RIGHT_PAREN: TOKEN_RIGHT_PAREN,\n\t    TOKEN_LEFT_BRACKET: TOKEN_LEFT_BRACKET,\n\t    TOKEN_RIGHT_BRACKET: TOKEN_RIGHT_BRACKET,\n\t    TOKEN_LEFT_CURLY: TOKEN_LEFT_CURLY,\n\t    TOKEN_RIGHT_CURLY: TOKEN_RIGHT_CURLY,\n\t    TOKEN_OPERATOR: TOKEN_OPERATOR,\n\t    TOKEN_COMMA: TOKEN_COMMA,\n\t    TOKEN_COLON: TOKEN_COLON,\n\t    TOKEN_TILDE: TOKEN_TILDE,\n\t    TOKEN_PIPE: TOKEN_PIPE,\n\t    TOKEN_INT: TOKEN_INT,\n\t    TOKEN_FLOAT: TOKEN_FLOAT,\n\t    TOKEN_BOOLEAN: TOKEN_BOOLEAN,\n\t    TOKEN_NONE: TOKEN_NONE,\n\t    TOKEN_SYMBOL: TOKEN_SYMBOL,\n\t    TOKEN_SPECIAL: TOKEN_SPECIAL,\n\t    TOKEN_REGEX: TOKEN_REGEX\n\t};\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(process) {'use strict';\n\n\tvar lib = __webpack_require__(1);\n\t// jshint -W079\n\tvar Object = __webpack_require__(6);\n\n\tfunction traverseAndCheck(obj, type, results) {\n\t    if(obj instanceof type) {\n\t        results.push(obj);\n\t    }\n\n\t    if(obj instanceof Node) {\n\t        obj.findAll(type, results);\n\t    }\n\t}\n\n\tvar Node = Object.extend('Node', {\n\t    init: function(lineno, colno) {\n\t        this.lineno = lineno;\n\t        this.colno = colno;\n\n\t        var fields = this.fields;\n\t        for(var i = 0, l = fields.length; i < l; i++) {\n\t            var field = fields[i];\n\n\t            // The first two args are line/col numbers, so offset by 2\n\t            var val = arguments[i + 2];\n\n\t            // Fields should never be undefined, but null. It makes\n\t            // testing easier to normalize values.\n\t            if(val === undefined) {\n\t                val = null;\n\t            }\n\n\t            this[field] = val;\n\t        }\n\t    },\n\n\t    findAll: function(type, results) {\n\t        results = results || [];\n\n\t        var i, l;\n\t        if(this instanceof NodeList) {\n\t            var children = this.children;\n\n\t            for(i = 0, l = children.length; i < l; i++) {\n\t                traverseAndCheck(children[i], type, results);\n\t            }\n\t        }\n\t        else {\n\t            var fields = this.fields;\n\n\t            for(i = 0, l = fields.length; i < l; i++) {\n\t                traverseAndCheck(this[fields[i]], type, results);\n\t            }\n\t        }\n\n\t        return results;\n\t    },\n\n\t    iterFields: function(func) {\n\t        lib.each(this.fields, function(field) {\n\t            func(this[field], field);\n\t        }, this);\n\t    }\n\t});\n\n\t// Abstract nodes\n\tvar Value = Node.extend('Value', { fields: ['value'] });\n\n\t// Concrete nodes\n\tvar NodeList = Node.extend('NodeList', {\n\t    fields: ['children'],\n\n\t    init: function(lineno, colno, nodes) {\n\t        this.parent(lineno, colno, nodes || []);\n\t    },\n\n\t    addChild: function(node) {\n\t        this.children.push(node);\n\t    }\n\t});\n\n\tvar Root = NodeList.extend('Root');\n\tvar Literal = Value.extend('Literal');\n\tvar Symbol = Value.extend('Symbol');\n\tvar Group = NodeList.extend('Group');\n\tvar Array = NodeList.extend('Array');\n\tvar Pair = Node.extend('Pair', { fields: ['key', 'value'] });\n\tvar Dict = NodeList.extend('Dict');\n\tvar LookupVal = Node.extend('LookupVal', { fields: ['target', 'val'] });\n\tvar If = Node.extend('If', { fields: ['cond', 'body', 'else_'] });\n\tvar IfAsync = If.extend('IfAsync');\n\tvar InlineIf = Node.extend('InlineIf', { fields: ['cond', 'body', 'else_'] });\n\tvar For = Node.extend('For', { fields: ['arr', 'name', 'body', 'else_'] });\n\tvar AsyncEach = For.extend('AsyncEach');\n\tvar AsyncAll = For.extend('AsyncAll');\n\tvar Macro = Node.extend('Macro', { fields: ['name', 'args', 'body'] });\n\tvar Caller = Macro.extend('Caller');\n\tvar Import = Node.extend('Import', { fields: ['template', 'target', 'withContext'] });\n\tvar FromImport = Node.extend('FromImport', {\n\t    fields: ['template', 'names', 'withContext'],\n\n\t    init: function(lineno, colno, template, names, withContext) {\n\t        this.parent(lineno, colno,\n\t                    template,\n\t                    names || new NodeList(), withContext);\n\t    }\n\t});\n\tvar FunCall = Node.extend('FunCall', { fields: ['name', 'args'] });\n\tvar Filter = FunCall.extend('Filter');\n\tvar FilterAsync = Filter.extend('FilterAsync', {\n\t    fields: ['name', 'args', 'symbol']\n\t});\n\tvar KeywordArgs = Dict.extend('KeywordArgs');\n\tvar Block = Node.extend('Block', { fields: ['name', 'body'] });\n\tvar Super = Node.extend('Super', { fields: ['blockName', 'symbol'] });\n\tvar TemplateRef = Node.extend('TemplateRef', { fields: ['template'] });\n\tvar Extends = TemplateRef.extend('Extends');\n\tvar Include = Node.extend('Include', { fields: ['template', 'ignoreMissing'] });\n\tvar Set = Node.extend('Set', { fields: ['targets', 'value'] });\n\tvar Output = NodeList.extend('Output');\n\tvar Capture = Node.extend('Capture', { fields: ['body'] });\n\tvar TemplateData = Literal.extend('TemplateData');\n\tvar UnaryOp = Node.extend('UnaryOp', { fields: ['target'] });\n\tvar BinOp = Node.extend('BinOp', { fields: ['left', 'right'] });\n\tvar In = BinOp.extend('In');\n\tvar Or = BinOp.extend('Or');\n\tvar And = BinOp.extend('And');\n\tvar Not = UnaryOp.extend('Not');\n\tvar Add = BinOp.extend('Add');\n\tvar Concat = BinOp.extend('Concat');\n\tvar Sub = BinOp.extend('Sub');\n\tvar Mul = BinOp.extend('Mul');\n\tvar Div = BinOp.extend('Div');\n\tvar FloorDiv = BinOp.extend('FloorDiv');\n\tvar Mod = BinOp.extend('Mod');\n\tvar Pow = BinOp.extend('Pow');\n\tvar Neg = UnaryOp.extend('Neg');\n\tvar Pos = UnaryOp.extend('Pos');\n\tvar Compare = Node.extend('Compare', { fields: ['expr', 'ops'] });\n\tvar CompareOperand = Node.extend('CompareOperand', {\n\t    fields: ['expr', 'type']\n\t});\n\n\tvar CallExtension = Node.extend('CallExtension', {\n\t    fields: ['extName', 'prop', 'args', 'contentArgs'],\n\n\t    init: function(ext, prop, args, contentArgs) {\n\t        this.extName = ext._name || ext;\n\t        this.prop = prop;\n\t        this.args = args || new NodeList();\n\t        this.contentArgs = contentArgs || [];\n\t        this.autoescape = ext.autoescape;\n\t    }\n\t});\n\n\tvar CallExtensionAsync = CallExtension.extend('CallExtensionAsync');\n\n\t// Print the AST in a nicely formatted tree format for debuggin\n\tfunction printNodes(node, indent) {\n\t    indent = indent || 0;\n\n\t    // This is hacky, but this is just a debugging function anyway\n\t    function print(str, indent, inline) {\n\t        var lines = str.split('\\n');\n\n\t        for(var i=0; i<lines.length; i++) {\n\t            if(lines[i]) {\n\t                if((inline && i > 0) || !inline) {\n\t                    for(var j=0; j<indent; j++) {\n\t                        process.stdout.write(' ');\n\t                    }\n\t                }\n\t            }\n\n\t            if(i === lines.length-1) {\n\t                process.stdout.write(lines[i]);\n\t            }\n\t            else {\n\t                process.stdout.write(lines[i] + '\\n');\n\t            }\n\t        }\n\t    }\n\n\t    print(node.typename + ': ', indent);\n\n\t    if(node instanceof NodeList) {\n\t        print('\\n');\n\t        lib.each(node.children, function(n) {\n\t            printNodes(n, indent + 2);\n\t        });\n\t    }\n\t    else if(node instanceof CallExtension) {\n\t        print(node.extName + '.' + node.prop);\n\t        print('\\n');\n\n\t        if(node.args) {\n\t            printNodes(node.args, indent + 2);\n\t        }\n\n\t        if(node.contentArgs) {\n\t            lib.each(node.contentArgs, function(n) {\n\t                printNodes(n, indent + 2);\n\t            });\n\t        }\n\t    }\n\t    else {\n\t        var nodes = null;\n\t        var props = null;\n\n\t        node.iterFields(function(val, field) {\n\t            if(val instanceof Node) {\n\t                nodes = nodes || {};\n\t                nodes[field] = val;\n\t            }\n\t            else {\n\t                props = props || {};\n\t                props[field] = val;\n\t            }\n\t        });\n\n\t        if(props) {\n\t            print(JSON.stringify(props, null, 2) + '\\n', null, true);\n\t        }\n\t        else {\n\t            print('\\n');\n\t        }\n\n\t        if(nodes) {\n\t            for(var k in nodes) {\n\t                printNodes(nodes[k], indent + 2);\n\t            }\n\t        }\n\n\t    }\n\t}\n\n\t// var t = new NodeList(0, 0,\n\t//                      [new Value(0, 0, 3),\n\t//                       new Value(0, 0, 10),\n\t//                       new Pair(0, 0,\n\t//                                new Value(0, 0, 'key'),\n\t//                                new Value(0, 0, 'value'))]);\n\t// printNodes(t);\n\n\tmodule.exports = {\n\t    Node: Node,\n\t    Root: Root,\n\t    NodeList: NodeList,\n\t    Value: Value,\n\t    Literal: Literal,\n\t    Symbol: Symbol,\n\t    Group: Group,\n\t    Array: Array,\n\t    Pair: Pair,\n\t    Dict: Dict,\n\t    Output: Output,\n\t    Capture: Capture,\n\t    TemplateData: TemplateData,\n\t    If: If,\n\t    IfAsync: IfAsync,\n\t    InlineIf: InlineIf,\n\t    For: For,\n\t    AsyncEach: AsyncEach,\n\t    AsyncAll: AsyncAll,\n\t    Macro: Macro,\n\t    Caller: Caller,\n\t    Import: Import,\n\t    FromImport: FromImport,\n\t    FunCall: FunCall,\n\t    Filter: Filter,\n\t    FilterAsync: FilterAsync,\n\t    KeywordArgs: KeywordArgs,\n\t    Block: Block,\n\t    Super: Super,\n\t    Extends: Extends,\n\t    Include: Include,\n\t    Set: Set,\n\t    LookupVal: LookupVal,\n\t    BinOp: BinOp,\n\t    In: In,\n\t    Or: Or,\n\t    And: And,\n\t    Not: Not,\n\t    Add: Add,\n\t    Concat: Concat,\n\t    Sub: Sub,\n\t    Mul: Mul,\n\t    Div: Div,\n\t    FloorDiv: FloorDiv,\n\t    Mod: Mod,\n\t    Pow: Pow,\n\t    Neg: Neg,\n\t    Pos: Pos,\n\t    Compare: Compare,\n\t    CompareOperand: CompareOperand,\n\n\t    CallExtension: CallExtension,\n\t    CallExtensionAsync: CallExtensionAsync,\n\n\t    printNodes: printNodes\n\t};\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar nodes = __webpack_require__(10);\n\tvar lib = __webpack_require__(1);\n\n\tvar sym = 0;\n\tfunction gensym() {\n\t    return 'hole_' + sym++;\n\t}\n\n\t// copy-on-write version of map\n\tfunction mapCOW(arr, func) {\n\t    var res = null;\n\n\t    for(var i=0; i<arr.length; i++) {\n\t        var item = func(arr[i]);\n\n\t        if(item !== arr[i]) {\n\t            if(!res) {\n\t                res = arr.slice();\n\t            }\n\n\t            res[i] = item;\n\t        }\n\t    }\n\n\t    return res || arr;\n\t}\n\n\tfunction walk(ast, func, depthFirst) {\n\t    if(!(ast instanceof nodes.Node)) {\n\t        return ast;\n\t    }\n\n\t    if(!depthFirst) {\n\t        var astT = func(ast);\n\n\t        if(astT && astT !== ast) {\n\t            return astT;\n\t        }\n\t    }\n\n\t    if(ast instanceof nodes.NodeList) {\n\t        var children = mapCOW(ast.children, function(node) {\n\t            return walk(node, func, depthFirst);\n\t        });\n\n\t        if(children !== ast.children) {\n\t            ast = new nodes[ast.typename](ast.lineno, ast.colno, children);\n\t        }\n\t    }\n\t    else if(ast instanceof nodes.CallExtension) {\n\t        var args = walk(ast.args, func, depthFirst);\n\n\t        var contentArgs = mapCOW(ast.contentArgs, function(node) {\n\t            return walk(node, func, depthFirst);\n\t        });\n\n\t        if(args !== ast.args || contentArgs !== ast.contentArgs) {\n\t            ast = new nodes[ast.typename](ast.extName,\n\t                                          ast.prop,\n\t                                          args,\n\t                                          contentArgs);\n\t        }\n\t    }\n\t    else {\n\t        var props = ast.fields.map(function(field) {\n\t            return ast[field];\n\t        });\n\n\t        var propsT = mapCOW(props, function(prop) {\n\t            return walk(prop, func, depthFirst);\n\t        });\n\n\t        if(propsT !== props) {\n\t            ast = new nodes[ast.typename](ast.lineno, ast.colno);\n\n\t            propsT.forEach(function(prop, i) {\n\t                ast[ast.fields[i]] = prop;\n\t            });\n\t        }\n\t    }\n\n\t    return depthFirst ? (func(ast) || ast) : ast;\n\t}\n\n\tfunction depthWalk(ast, func) {\n\t    return walk(ast, func, true);\n\t}\n\n\tfunction _liftFilters(node, asyncFilters, prop) {\n\t    var children = [];\n\n\t    var walked = depthWalk(prop ? node[prop] : node, function(node) {\n\t        if(node instanceof nodes.Block) {\n\t            return node;\n\t        }\n\t        else if((node instanceof nodes.Filter &&\n\t                 lib.indexOf(asyncFilters, node.name.value) !== -1) ||\n\t                node instanceof nodes.CallExtensionAsync) {\n\t            var symbol = new nodes.Symbol(node.lineno,\n\t                                          node.colno,\n\t                                          gensym());\n\n\t            children.push(new nodes.FilterAsync(node.lineno,\n\t                                                node.colno,\n\t                                                node.name,\n\t                                                node.args,\n\t                                                symbol));\n\t            return symbol;\n\t        }\n\t    });\n\n\t    if(prop) {\n\t        node[prop] = walked;\n\t    }\n\t    else {\n\t        node = walked;\n\t    }\n\n\t    if(children.length) {\n\t        children.push(node);\n\n\t        return new nodes.NodeList(\n\t            node.lineno,\n\t            node.colno,\n\t            children\n\t        );\n\t    }\n\t    else {\n\t        return node;\n\t    }\n\t}\n\n\tfunction liftFilters(ast, asyncFilters) {\n\t    return depthWalk(ast, function(node) {\n\t        if(node instanceof nodes.Output) {\n\t            return _liftFilters(node, asyncFilters);\n\t        }\n\t        else if(node instanceof nodes.Set) {\n\t            return _liftFilters(node, asyncFilters, 'value');\n\t        }\n\t        else if(node instanceof nodes.For) {\n\t            return _liftFilters(node, asyncFilters, 'arr');\n\t        }\n\t        else if(node instanceof nodes.If) {\n\t            return _liftFilters(node, asyncFilters, 'cond');\n\t        }\n\t        else if(node instanceof nodes.CallExtension) {\n\t            return _liftFilters(node, asyncFilters, 'args');\n\t        }\n\t    });\n\t}\n\n\tfunction liftSuper(ast) {\n\t    return walk(ast, function(blockNode) {\n\t        if(!(blockNode instanceof nodes.Block)) {\n\t            return;\n\t        }\n\n\t        var hasSuper = false;\n\t        var symbol = gensym();\n\n\t        blockNode.body = walk(blockNode.body, function(node) {\n\t            if(node instanceof nodes.FunCall &&\n\t               node.name.value === 'super') {\n\t                hasSuper = true;\n\t                return new nodes.Symbol(node.lineno, node.colno, symbol);\n\t            }\n\t        });\n\n\t        if(hasSuper) {\n\t            blockNode.body.children.unshift(new nodes.Super(\n\t                0, 0, blockNode.name, new nodes.Symbol(0, 0, symbol)\n\t            ));\n\t        }\n\t    });\n\t}\n\n\tfunction convertStatements(ast) {\n\t    return depthWalk(ast, function(node) {\n\t        if(!(node instanceof nodes.If) &&\n\t           !(node instanceof nodes.For)) {\n\t            return;\n\t        }\n\n\t        var async = false;\n\t        walk(node, function(node) {\n\t            if(node instanceof nodes.FilterAsync ||\n\t               node instanceof nodes.IfAsync ||\n\t               node instanceof nodes.AsyncEach ||\n\t               node instanceof nodes.AsyncAll ||\n\t               node instanceof nodes.CallExtensionAsync) {\n\t                async = true;\n\t                // Stop iterating by returning the node\n\t                return node;\n\t            }\n\t        });\n\n\t        if(async) {\n\t\t        if(node instanceof nodes.If) {\n\t                return new nodes.IfAsync(\n\t                    node.lineno,\n\t                    node.colno,\n\t                    node.cond,\n\t                    node.body,\n\t                    node.else_\n\t                );\n\t            }\n\t            else if(node instanceof nodes.For) {\n\t                return new nodes.AsyncEach(\n\t                    node.lineno,\n\t                    node.colno,\n\t                    node.arr,\n\t                    node.name,\n\t                    node.body,\n\t                    node.else_\n\t                );\n\t            }\n\t        }\n\t    });\n\t}\n\n\tfunction cps(ast, asyncFilters) {\n\t    return convertStatements(liftSuper(liftFilters(ast, asyncFilters)));\n\t}\n\n\tfunction transform(ast, asyncFilters) {\n\t    return cps(ast, asyncFilters || []);\n\t}\n\n\t// var parser = require('./parser');\n\t// var src = 'hello {% foo %}{% endfoo %} end';\n\t// var ast = transform(parser.parse(src, [new FooExtension()]), ['bar']);\n\t// nodes.printNodes(ast);\n\n\tmodule.exports = {\n\t    transform: transform\n\t};\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar lib = __webpack_require__(1);\n\tvar Obj = __webpack_require__(6);\n\n\t// Frames keep track of scoping both at compile-time and run-time so\n\t// we know how to access variables. Block tags can introduce special\n\t// variables, for example.\n\tvar Frame = Obj.extend({\n\t    init: function(parent, isolateWrites) {\n\t        this.variables = {};\n\t        this.parent = parent;\n\t        this.topLevel = false;\n\t        // if this is true, writes (set) should never propagate upwards past\n\t        // this frame to its parent (though reads may).\n\t        this.isolateWrites = isolateWrites;\n\t    },\n\n\t    set: function(name, val, resolveUp) {\n\t        // Allow variables with dots by automatically creating the\n\t        // nested structure\n\t        var parts = name.split('.');\n\t        var obj = this.variables;\n\t        var frame = this;\n\n\t        if(resolveUp) {\n\t            if((frame = this.resolve(parts[0], true))) {\n\t                frame.set(name, val);\n\t                return;\n\t            }\n\t        }\n\n\t        for(var i=0; i<parts.length - 1; i++) {\n\t            var id = parts[i];\n\n\t            if(!obj[id]) {\n\t                obj[id] = {};\n\t            }\n\t            obj = obj[id];\n\t        }\n\n\t        obj[parts[parts.length - 1]] = val;\n\t    },\n\n\t    get: function(name) {\n\t        var val = this.variables[name];\n\t        if(val !== undefined && val !== null) {\n\t            return val;\n\t        }\n\t        return null;\n\t    },\n\n\t    lookup: function(name) {\n\t        var p = this.parent;\n\t        var val = this.variables[name];\n\t        if(val !== undefined && val !== null) {\n\t            return val;\n\t        }\n\t        return p && p.lookup(name);\n\t    },\n\n\t    resolve: function(name, forWrite) {\n\t        var p = (forWrite && this.isolateWrites) ? undefined : this.parent;\n\t        var val = this.variables[name];\n\t        if(val !== undefined && val !== null) {\n\t            return this;\n\t        }\n\t        return p && p.resolve(name);\n\t    },\n\n\t    push: function(isolateWrites) {\n\t        return new Frame(this, isolateWrites);\n\t    },\n\n\t    pop: function() {\n\t        return this.parent;\n\t    }\n\t});\n\n\tfunction makeMacro(argNames, kwargNames, func) {\n\t    return function() {\n\t        var argCount = numArgs(arguments);\n\t        var args;\n\t        var kwargs = getKeywordArgs(arguments);\n\t        var i;\n\n\t        if(argCount > argNames.length) {\n\t            args = Array.prototype.slice.call(arguments, 0, argNames.length);\n\n\t            // Positional arguments that should be passed in as\n\t            // keyword arguments (essentially default values)\n\t            var vals = Array.prototype.slice.call(arguments, args.length, argCount);\n\t            for(i = 0; i < vals.length; i++) {\n\t                if(i < kwargNames.length) {\n\t                    kwargs[kwargNames[i]] = vals[i];\n\t                }\n\t            }\n\n\t            args.push(kwargs);\n\t        }\n\t        else if(argCount < argNames.length) {\n\t            args = Array.prototype.slice.call(arguments, 0, argCount);\n\n\t            for(i = argCount; i < argNames.length; i++) {\n\t                var arg = argNames[i];\n\n\t                // Keyword arguments that should be passed as\n\t                // positional arguments, i.e. the caller explicitly\n\t                // used the name of a positional arg\n\t                args.push(kwargs[arg]);\n\t                delete kwargs[arg];\n\t            }\n\n\t            args.push(kwargs);\n\t        }\n\t        else {\n\t            args = arguments;\n\t        }\n\n\t        return func.apply(this, args);\n\t    };\n\t}\n\n\tfunction makeKeywordArgs(obj) {\n\t    obj.__keywords = true;\n\t    return obj;\n\t}\n\n\tfunction getKeywordArgs(args) {\n\t    var len = args.length;\n\t    if(len) {\n\t        var lastArg = args[len - 1];\n\t        if(lastArg && lastArg.hasOwnProperty('__keywords')) {\n\t            return lastArg;\n\t        }\n\t    }\n\t    return {};\n\t}\n\n\tfunction numArgs(args) {\n\t    var len = args.length;\n\t    if(len === 0) {\n\t        return 0;\n\t    }\n\n\t    var lastArg = args[len - 1];\n\t    if(lastArg && lastArg.hasOwnProperty('__keywords')) {\n\t        return len - 1;\n\t    }\n\t    else {\n\t        return len;\n\t    }\n\t}\n\n\t// A SafeString object indicates that the string should not be\n\t// autoescaped. This happens magically because autoescaping only\n\t// occurs on primitive string objects.\n\tfunction SafeString(val) {\n\t    if(typeof val !== 'string') {\n\t        return val;\n\t    }\n\n\t    this.val = val;\n\t    this.length = val.length;\n\t}\n\n\tSafeString.prototype = Object.create(String.prototype, {\n\t    length: { writable: true, configurable: true, value: 0 }\n\t});\n\tSafeString.prototype.valueOf = function() {\n\t    return this.val;\n\t};\n\tSafeString.prototype.toString = function() {\n\t    return this.val;\n\t};\n\n\tfunction copySafeness(dest, target) {\n\t    if(dest instanceof SafeString) {\n\t        return new SafeString(target);\n\t    }\n\t    return target.toString();\n\t}\n\n\tfunction markSafe(val) {\n\t    var type = typeof val;\n\n\t    if(type === 'string') {\n\t        return new SafeString(val);\n\t    }\n\t    else if(type !== 'function') {\n\t        return val;\n\t    }\n\t    else {\n\t        return function() {\n\t            var ret = val.apply(this, arguments);\n\n\t            if(typeof ret === 'string') {\n\t                return new SafeString(ret);\n\t            }\n\n\t            return ret;\n\t        };\n\t    }\n\t}\n\n\tfunction suppressValue(val, autoescape) {\n\t    val = (val !== undefined && val !== null) ? val : '';\n\n\t    if(autoescape && !(val instanceof SafeString)) {\n\t        val = lib.escape(val.toString());\n\t    }\n\n\t    return val;\n\t}\n\n\tfunction ensureDefined(val, lineno, colno) {\n\t    if(val === null || val === undefined) {\n\t        throw new lib.TemplateError(\n\t            'attempted to output null or undefined value',\n\t            lineno + 1,\n\t            colno + 1\n\t        );\n\t    }\n\t    return val;\n\t}\n\n\tfunction memberLookup(obj, val) {\n\t    obj = obj || {};\n\n\t    if(typeof obj[val] === 'function') {\n\t        return function() {\n\t            return obj[val].apply(obj, arguments);\n\t        };\n\t    }\n\n\t    return obj[val];\n\t}\n\n\tfunction callWrap(obj, name, context, args) {\n\t    if(!obj) {\n\t        throw new Error('Unable to call `' + name + '`, which is undefined or falsey');\n\t    }\n\t    else if(typeof obj !== 'function') {\n\t        throw new Error('Unable to call `' + name + '`, which is not a function');\n\t    }\n\n\t    // jshint validthis: true\n\t    return obj.apply(context, args);\n\t}\n\n\tfunction contextOrFrameLookup(context, frame, name) {\n\t    var val = frame.lookup(name);\n\t    return (val !== undefined && val !== null) ?\n\t        val :\n\t        context.lookup(name);\n\t}\n\n\tfunction handleError(error, lineno, colno) {\n\t    if(error.lineno) {\n\t        return error;\n\t    }\n\t    else {\n\t        return new lib.TemplateError(error, lineno, colno);\n\t    }\n\t}\n\n\tfunction asyncEach(arr, dimen, iter, cb) {\n\t    if(lib.isArray(arr)) {\n\t        var len = arr.length;\n\n\t        lib.asyncIter(arr, function(item, i, next) {\n\t            switch(dimen) {\n\t            case 1: iter(item, i, len, next); break;\n\t            case 2: iter(item[0], item[1], i, len, next); break;\n\t            case 3: iter(item[0], item[1], item[2], i, len, next); break;\n\t            default:\n\t                item.push(i, next);\n\t                iter.apply(this, item);\n\t            }\n\t        }, cb);\n\t    }\n\t    else {\n\t        lib.asyncFor(arr, function(key, val, i, len, next) {\n\t            iter(key, val, i, len, next);\n\t        }, cb);\n\t    }\n\t}\n\n\tfunction asyncAll(arr, dimen, func, cb) {\n\t    var finished = 0;\n\t    var len, i;\n\t    var outputArr;\n\n\t    function done(i, output) {\n\t        finished++;\n\t        outputArr[i] = output;\n\n\t        if(finished === len) {\n\t            cb(null, outputArr.join(''));\n\t        }\n\t    }\n\n\t    if(lib.isArray(arr)) {\n\t        len = arr.length;\n\t        outputArr = new Array(len);\n\n\t        if(len === 0) {\n\t            cb(null, '');\n\t        }\n\t        else {\n\t            for(i = 0; i < arr.length; i++) {\n\t                var item = arr[i];\n\n\t                switch(dimen) {\n\t                case 1: func(item, i, len, done); break;\n\t                case 2: func(item[0], item[1], i, len, done); break;\n\t                case 3: func(item[0], item[1], item[2], i, len, done); break;\n\t                default:\n\t                    item.push(i, done);\n\t                    // jshint validthis: true\n\t                    func.apply(this, item);\n\t                }\n\t            }\n\t        }\n\t    }\n\t    else {\n\t        var keys = lib.keys(arr);\n\t        len = keys.length;\n\t        outputArr = new Array(len);\n\n\t        if(len === 0) {\n\t            cb(null, '');\n\t        }\n\t        else {\n\t            for(i = 0; i < keys.length; i++) {\n\t                var k = keys[i];\n\t                func(k, arr[k], i, len, done);\n\t            }\n\t        }\n\t    }\n\t}\n\n\tmodule.exports = {\n\t    Frame: Frame,\n\t    makeMacro: makeMacro,\n\t    makeKeywordArgs: makeKeywordArgs,\n\t    numArgs: numArgs,\n\t    suppressValue: suppressValue,\n\t    ensureDefined: ensureDefined,\n\t    memberLookup: memberLookup,\n\t    contextOrFrameLookup: contextOrFrameLookup,\n\t    callWrap: callWrap,\n\t    handleError: handleError,\n\t    isArray: lib.isArray,\n\t    keys: lib.keys,\n\t    SafeString: SafeString,\n\t    copySafeness: copySafeness,\n\t    markSafe: markSafe,\n\t    asyncEach: asyncEach,\n\t    asyncAll: asyncAll,\n\t    inOperator: lib.inOperator\n\t};\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar lib = __webpack_require__(1);\n\tvar r = __webpack_require__(12);\n\n\tfunction normalize(value, defaultValue) {\n\t    if(value === null || value === undefined || value === false) {\n\t        return defaultValue;\n\t    }\n\t    return value;\n\t}\n\n\tvar filters = {\n\t    abs: function(n) {\n\t        return Math.abs(n);\n\t    },\n\n\t    batch: function(arr, linecount, fill_with) {\n\t        var i;\n\t        var res = [];\n\t        var tmp = [];\n\n\t        for(i = 0; i < arr.length; i++) {\n\t            if(i % linecount === 0 && tmp.length) {\n\t                res.push(tmp);\n\t                tmp = [];\n\t            }\n\n\t            tmp.push(arr[i]);\n\t        }\n\n\t        if(tmp.length) {\n\t            if(fill_with) {\n\t                for(i = tmp.length; i < linecount; i++) {\n\t                    tmp.push(fill_with);\n\t                }\n\t            }\n\n\t            res.push(tmp);\n\t        }\n\n\t        return res;\n\t    },\n\n\t    capitalize: function(str) {\n\t        str = normalize(str, '');\n\t        var ret = str.toLowerCase();\n\t        return r.copySafeness(str, ret.charAt(0).toUpperCase() + ret.slice(1));\n\t    },\n\n\t    center: function(str, width) {\n\t        str = normalize(str, '');\n\t        width = width || 80;\n\n\t        if(str.length >= width) {\n\t            return str;\n\t        }\n\n\t        var spaces = width - str.length;\n\t        var pre = lib.repeat(' ', spaces/2 - spaces % 2);\n\t        var post = lib.repeat(' ', spaces/2);\n\t        return r.copySafeness(str, pre + str + post);\n\t    },\n\n\t    'default': function(val, def, bool) {\n\t        if(bool) {\n\t            return val ? val : def;\n\t        }\n\t        else {\n\t            return (val !== undefined) ? val : def;\n\t        }\n\t    },\n\n\t    dictsort: function(val, case_sensitive, by) {\n\t        if (!lib.isObject(val)) {\n\t            throw new lib.TemplateError('dictsort filter: val must be an object');\n\t        }\n\n\t        var array = [];\n\t        for (var k in val) {\n\t            // deliberately include properties from the object's prototype\n\t            array.push([k,val[k]]);\n\t        }\n\n\t        var si;\n\t        if (by === undefined || by === 'key') {\n\t            si = 0;\n\t        } else if (by === 'value') {\n\t            si = 1;\n\t        } else {\n\t            throw new lib.TemplateError(\n\t                'dictsort filter: You can only sort by either key or value');\n\t        }\n\n\t        array.sort(function(t1, t2) {\n\t            var a = t1[si];\n\t            var b = t2[si];\n\n\t            if (!case_sensitive) {\n\t                if (lib.isString(a)) {\n\t                    a = a.toUpperCase();\n\t                }\n\t                if (lib.isString(b)) {\n\t                    b = b.toUpperCase();\n\t                }\n\t            }\n\n\t            return a > b ? 1 : (a === b ? 0 : -1);\n\t        });\n\n\t        return array;\n\t    },\n\n\t    dump: function(obj) {\n\t        return JSON.stringify(obj);\n\t    },\n\n\t    escape: function(str) {\n\t        if(str instanceof r.SafeString) {\n\t            return str;\n\t        }\n\t        str = (str === null || str === undefined) ? '' : str;\n\t        return r.markSafe(lib.escape(str.toString()));\n\t    },\n\n\t    safe: function(str) {\n\t        if (str instanceof r.SafeString) {\n\t            return str;\n\t        }\n\t        str = (str === null || str === undefined) ? '' : str;\n\t        return r.markSafe(str.toString());\n\t    },\n\n\t    first: function(arr) {\n\t        return arr[0];\n\t    },\n\n\t    groupby: function(arr, attr) {\n\t        return lib.groupBy(arr, attr);\n\t    },\n\n\t    indent: function(str, width, indentfirst) {\n\t        str = normalize(str, '');\n\n\t        if (str === '') return '';\n\n\t        width = width || 4;\n\t        var res = '';\n\t        var lines = str.split('\\n');\n\t        var sp = lib.repeat(' ', width);\n\n\t        for(var i=0; i<lines.length; i++) {\n\t            if(i === 0 && !indentfirst) {\n\t                res += lines[i] + '\\n';\n\t            }\n\t            else {\n\t                res += sp + lines[i] + '\\n';\n\t            }\n\t        }\n\n\t        return r.copySafeness(str, res);\n\t    },\n\n\t    join: function(arr, del, attr) {\n\t        del = del || '';\n\n\t        if(attr) {\n\t            arr = lib.map(arr, function(v) {\n\t                return v[attr];\n\t            });\n\t        }\n\n\t        return arr.join(del);\n\t    },\n\n\t    last: function(arr) {\n\t        return arr[arr.length-1];\n\t    },\n\n\t    length: function(val) {\n\t        var value = normalize(val, '');\n\n\t        if(value !== undefined) {\n\t            if(\n\t                (typeof Map === 'function' && value instanceof Map) ||\n\t                (typeof Set === 'function' && value instanceof Set)\n\t            ) {\n\t                // ECMAScript 2015 Maps and Sets\n\t                return value.size;\n\t            }\n\t            if(lib.isObject(value) && !(value instanceof r.SafeString)) {\n\t                // Objects (besides SafeStrings), non-primative Arrays\n\t                return Object.keys(value).length;\n\t            }\n\t            return value.length;\n\t        }\n\t        return 0;\n\t    },\n\n\t    list: function(val) {\n\t        if(lib.isString(val)) {\n\t            return val.split('');\n\t        }\n\t        else if(lib.isObject(val)) {\n\t            var keys = [];\n\n\t            if(Object.keys) {\n\t                keys = Object.keys(val);\n\t            }\n\t            else {\n\t                for(var k in val) {\n\t                    keys.push(k);\n\t                }\n\t            }\n\n\t            return lib.map(keys, function(k) {\n\t                return { key: k,\n\t                         value: val[k] };\n\t            });\n\t        }\n\t        else if(lib.isArray(val)) {\n\t          return val;\n\t        }\n\t        else {\n\t            throw new lib.TemplateError('list filter: type not iterable');\n\t        }\n\t    },\n\n\t    lower: function(str) {\n\t        str = normalize(str, '');\n\t        return str.toLowerCase();\n\t    },\n\n\t    random: function(arr) {\n\t        return arr[Math.floor(Math.random() * arr.length)];\n\t    },\n\n\t    rejectattr: function(arr, attr) {\n\t      return arr.filter(function (item) {\n\t        return !item[attr];\n\t      });\n\t    },\n\n\t    selectattr: function(arr, attr) {\n\t      return arr.filter(function (item) {\n\t        return !!item[attr];\n\t      });\n\t    },\n\n\t    replace: function(str, old, new_, maxCount) {\n\t        var originalStr = str;\n\n\t        if (old instanceof RegExp) {\n\t            return str.replace(old, new_);\n\t        }\n\n\t        if(typeof maxCount === 'undefined'){\n\t            maxCount = -1;\n\t        }\n\n\t        var res = '';  // Output\n\n\t        // Cast Numbers in the search term to string\n\t        if(typeof old === 'number'){\n\t            old = old + '';\n\t        }\n\t        else if(typeof old !== 'string') {\n\t            // If it is something other than number or string,\n\t            // return the original string\n\t            return str;\n\t        }\n\n\t        // Cast numbers in the replacement to string\n\t        if(typeof str === 'number'){\n\t            str = str + '';\n\t        }\n\n\t        // If by now, we don't have a string, throw it back\n\t        if(typeof str !== 'string' && !(str instanceof r.SafeString)){\n\t            return str;\n\t        }\n\n\t        // ShortCircuits\n\t        if(old === ''){\n\t            // Mimic the python behaviour: empty string is replaced\n\t            // by replacement e.g. \"abc\"|replace(\"\", \".\") -> .a.b.c.\n\t            res = new_ + str.split('').join(new_) + new_;\n\t            return r.copySafeness(str, res);\n\t        }\n\n\t        var nextIndex = str.indexOf(old);\n\t        // if # of replacements to perform is 0, or the string to does\n\t        // not contain the old value, return the string\n\t        if(maxCount === 0 || nextIndex === -1){\n\t            return str;\n\t        }\n\n\t        var pos = 0;\n\t        var count = 0; // # of replacements made\n\n\t        while(nextIndex  > -1 && (maxCount === -1 || count < maxCount)){\n\t            // Grab the next chunk of src string and add it with the\n\t            // replacement, to the result\n\t            res += str.substring(pos, nextIndex) + new_;\n\t            // Increment our pointer in the src string\n\t            pos = nextIndex + old.length;\n\t            count++;\n\t            // See if there are any more replacements to be made\n\t            nextIndex = str.indexOf(old, pos);\n\t        }\n\n\t        // We've either reached the end, or done the max # of\n\t        // replacements, tack on any remaining string\n\t        if(pos < str.length) {\n\t            res += str.substring(pos);\n\t        }\n\n\t        return r.copySafeness(originalStr, res);\n\t    },\n\n\t    reverse: function(val) {\n\t        var arr;\n\t        if(lib.isString(val)) {\n\t            arr = filters.list(val);\n\t        }\n\t        else {\n\t            // Copy it\n\t            arr = lib.map(val, function(v) { return v; });\n\t        }\n\n\t        arr.reverse();\n\n\t        if(lib.isString(val)) {\n\t            return r.copySafeness(val, arr.join(''));\n\t        }\n\t        return arr;\n\t    },\n\n\t    round: function(val, precision, method) {\n\t        precision = precision || 0;\n\t        var factor = Math.pow(10, precision);\n\t        var rounder;\n\n\t        if(method === 'ceil') {\n\t            rounder = Math.ceil;\n\t        }\n\t        else if(method === 'floor') {\n\t            rounder = Math.floor;\n\t        }\n\t        else {\n\t            rounder = Math.round;\n\t        }\n\n\t        return rounder(val * factor) / factor;\n\t    },\n\n\t    slice: function(arr, slices, fillWith) {\n\t        var sliceLength = Math.floor(arr.length / slices);\n\t        var extra = arr.length % slices;\n\t        var offset = 0;\n\t        var res = [];\n\n\t        for(var i=0; i<slices; i++) {\n\t            var start = offset + i * sliceLength;\n\t            if(i < extra) {\n\t                offset++;\n\t            }\n\t            var end = offset + (i + 1) * sliceLength;\n\n\t            var slice = arr.slice(start, end);\n\t            if(fillWith && i >= extra) {\n\t                slice.push(fillWith);\n\t            }\n\t            res.push(slice);\n\t        }\n\n\t        return res;\n\t    },\n\n\t    sum: function(arr, attr, start) {\n\t        var sum = 0;\n\n\t        if(typeof start === 'number'){\n\t            sum += start;\n\t        }\n\n\t        if(attr) {\n\t            arr = lib.map(arr, function(v) {\n\t                return v[attr];\n\t            });\n\t        }\n\n\t        for(var i = 0; i < arr.length; i++) {\n\t            sum += arr[i];\n\t        }\n\n\t        return sum;\n\t    },\n\n\t    sort: r.makeMacro(['value', 'reverse', 'case_sensitive', 'attribute'], [], function(arr, reverse, caseSens, attr) {\n\t         // Copy it\n\t        arr = lib.map(arr, function(v) { return v; });\n\n\t        arr.sort(function(a, b) {\n\t            var x, y;\n\n\t            if(attr) {\n\t                x = a[attr];\n\t                y = b[attr];\n\t            }\n\t            else {\n\t                x = a;\n\t                y = b;\n\t            }\n\n\t            if(!caseSens && lib.isString(x) && lib.isString(y)) {\n\t                x = x.toLowerCase();\n\t                y = y.toLowerCase();\n\t            }\n\n\t            if(x < y) {\n\t                return reverse ? 1 : -1;\n\t            }\n\t            else if(x > y) {\n\t                return reverse ? -1: 1;\n\t            }\n\t            else {\n\t                return 0;\n\t            }\n\t        });\n\n\t        return arr;\n\t    }),\n\n\t    string: function(obj) {\n\t        return r.copySafeness(obj, obj);\n\t    },\n\n\t    striptags: function(input, preserve_linebreaks) {\n\t        input = normalize(input, '');\n\t        preserve_linebreaks = preserve_linebreaks || false;\n\t        var tags = /<\\/?([a-z][a-z0-9]*)\\b[^>]*>|<!--[\\s\\S]*?-->/gi;\n\t        var trimmedInput = filters.trim(input.replace(tags, ''));\n\t        var res = '';\n\t        if (preserve_linebreaks) {\n\t            res = trimmedInput\n\t                .replace(/^ +| +$/gm, '')     // remove leading and trailing spaces\n\t                .replace(/ +/g, ' ')          // squash adjacent spaces\n\t                .replace(/(\\r\\n)/g, '\\n')     // normalize linebreaks (CRLF -> LF)\n\t                .replace(/\\n\\n\\n+/g, '\\n\\n'); // squash abnormal adjacent linebreaks\n\t        } else {\n\t            res = trimmedInput.replace(/\\s+/gi, ' ');\n\t        }\n\t        return r.copySafeness(input, res);\n\t    },\n\n\t    title: function(str) {\n\t        str = normalize(str, '');\n\t        var words = str.split(' ');\n\t        for(var i = 0; i < words.length; i++) {\n\t            words[i] = filters.capitalize(words[i]);\n\t        }\n\t        return r.copySafeness(str, words.join(' '));\n\t    },\n\n\t    trim: function(str) {\n\t        return r.copySafeness(str, str.replace(/^\\s*|\\s*$/g, ''));\n\t    },\n\n\t    truncate: function(input, length, killwords, end) {\n\t        var orig = input;\n\t        input = normalize(input, '');\n\t        length = length || 255;\n\n\t        if (input.length <= length)\n\t            return input;\n\n\t        if (killwords) {\n\t            input = input.substring(0, length);\n\t        } else {\n\t            var idx = input.lastIndexOf(' ', length);\n\t            if(idx === -1) {\n\t                idx = length;\n\t            }\n\n\t            input = input.substring(0, idx);\n\t        }\n\n\t        input += (end !== undefined && end !== null) ? end : '...';\n\t        return r.copySafeness(orig, input);\n\t    },\n\n\t    upper: function(str) {\n\t        str = normalize(str, '');\n\t        return str.toUpperCase();\n\t    },\n\n\t    urlencode: function(obj) {\n\t        var enc = encodeURIComponent;\n\t        if (lib.isString(obj)) {\n\t            return enc(obj);\n\t        } else {\n\t            var parts;\n\t            if (lib.isArray(obj)) {\n\t                parts = obj.map(function(item) {\n\t                    return enc(item[0]) + '=' + enc(item[1]);\n\t                });\n\t            } else {\n\t                parts = [];\n\t                for (var k in obj) {\n\t                    if (obj.hasOwnProperty(k)) {\n\t                        parts.push(enc(k) + '=' + enc(obj[k]));\n\t                    }\n\t                }\n\t            }\n\t            return parts.join('&');\n\t        }\n\t    },\n\n\t    urlize: function(str, length, nofollow) {\n\t        if (isNaN(length)) length = Infinity;\n\n\t        var noFollowAttr = (nofollow === true ? ' rel=\"nofollow\"' : '');\n\n\t        // For the jinja regexp, see\n\t        // https://github.com/mitsuhiko/jinja2/blob/f15b814dcba6aa12bc74d1f7d0c881d55f7126be/jinja2/utils.py#L20-L23\n\t        var puncRE = /^(?:\\(|<|&lt;)?(.*?)(?:\\.|,|\\)|\\n|&gt;)?$/;\n\t        // from http://blog.gerv.net/2011/05/html5_email_address_regexp/\n\t        var emailRE = /^[\\w.!#$%&'*+\\-\\/=?\\^`{|}~]+@[a-z\\d\\-]+(\\.[a-z\\d\\-]+)+$/i;\n\t        var httpHttpsRE = /^https?:\\/\\/.*$/;\n\t        var wwwRE = /^www\\./;\n\t        var tldRE = /\\.(?:org|net|com)(?:\\:|\\/|$)/;\n\n\t        var words = str.split(/(\\s+)/).filter(function(word) {\n\t          // If the word has no length, bail. This can happen for str with\n\t          // trailing whitespace.\n\t          return word && word.length;\n\t        }).map(function(word) {\n\t          var matches = word.match(puncRE);\n\t          var possibleUrl = matches && matches[1] || word;\n\n\t          // url that starts with http or https\n\t          if (httpHttpsRE.test(possibleUrl))\n\t            return '<a href=\"' + possibleUrl + '\"' + noFollowAttr + '>' + possibleUrl.substr(0, length) + '</a>';\n\n\t          // url that starts with www.\n\t          if (wwwRE.test(possibleUrl))\n\t            return '<a href=\"http://' + possibleUrl + '\"' + noFollowAttr + '>' + possibleUrl.substr(0, length) + '</a>';\n\n\t          // an email address of the form username@domain.tld\n\t          if (emailRE.test(possibleUrl))\n\t            return '<a href=\"mailto:' + possibleUrl + '\">' + possibleUrl + '</a>';\n\n\t          // url that ends in .com, .org or .net that is not an email address\n\t          if (tldRE.test(possibleUrl))\n\t            return '<a href=\"http://' + possibleUrl + '\"' + noFollowAttr + '>' + possibleUrl.substr(0, length) + '</a>';\n\n\t          return word;\n\n\t        });\n\n\t        return words.join('');\n\t    },\n\n\t    wordcount: function(str) {\n\t        str = normalize(str, '');\n\t        var words = (str) ? str.match(/\\w+/g) : null;\n\t        return (words) ? words.length : null;\n\t    },\n\n\t    'float': function(val, def) {\n\t        var res = parseFloat(val);\n\t        return isNaN(res) ? def : res;\n\t    },\n\n\t    'int': function(val, def) {\n\t        var res = parseInt(val, 10);\n\t        return isNaN(res) ? def : res;\n\t    }\n\t};\n\n\t// Aliases\n\tfilters.d = filters['default'];\n\tfilters.e = filters.escape;\n\n\tmodule.exports = filters;\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar Loader = __webpack_require__(15);\n\tvar PrecompiledLoader = __webpack_require__(16);\n\n\tvar WebLoader = Loader.extend({\n\t    init: function(baseURL, opts) {\n\t        this.baseURL = baseURL || '.';\n\t        opts = opts || {};\n\n\t        // By default, the cache is turned off because there's no way\n\t        // to \"watch\" templates over HTTP, so they are re-downloaded\n\t        // and compiled each time. (Remember, PRECOMPILE YOUR\n\t        // TEMPLATES in production!)\n\t        this.useCache = !!opts.useCache;\n\n\t        // We default `async` to false so that the simple synchronous\n\t        // API can be used when you aren't doing anything async in\n\t        // your templates (which is most of the time). This performs a\n\t        // sync ajax request, but that's ok because it should *only*\n\t        // happen in development. PRECOMPILE YOUR TEMPLATES.\n\t        this.async = !!opts.async;\n\t    },\n\n\t    resolve: function(from, to) { // jshint ignore:line\n\t        throw new Error('relative templates not support in the browser yet');\n\t    },\n\n\t    getSource: function(name, cb) {\n\t        var useCache = this.useCache;\n\t        var result;\n\t        this.fetch(this.baseURL + '/' + name, function(err, src) {\n\t            if(err) {\n\t                if(cb) {\n\t                    cb(err.content);\n\t                } else {\n\t                    if (err.status === 404) {\n\t                      result = null;\n\t                    } else {\n\t                      throw err.content;\n\t                    }\n\t                }\n\t            }\n\t            else {\n\t                result = { src: src,\n\t                           path: name,\n\t                           noCache: !useCache };\n\t                if(cb) {\n\t                    cb(null, result);\n\t                }\n\t            }\n\t        });\n\n\t        // if this WebLoader isn't running asynchronously, the\n\t        // fetch above would actually run sync and we'll have a\n\t        // result here\n\t        return result;\n\t    },\n\n\t    fetch: function(url, cb) {\n\t        // Only in the browser please\n\t        var ajax;\n\t        var loading = true;\n\n\t        if(window.XMLHttpRequest) { // Mozilla, Safari, ...\n\t            ajax = new XMLHttpRequest();\n\t        }\n\t        else if(window.ActiveXObject) { // IE 8 and older\n\t            /* global ActiveXObject */\n\t            ajax = new ActiveXObject('Microsoft.XMLHTTP');\n\t        }\n\n\t        ajax.onreadystatechange = function() {\n\t            if(ajax.readyState === 4 && loading) {\n\t                loading = false;\n\t                if(ajax.status === 0 || ajax.status === 200) {\n\t                    cb(null, ajax.responseText);\n\t                }\n\t                else {\n\t                    cb({ status: ajax.status, content: ajax.responseText });\n\t                }\n\t            }\n\t        };\n\n\t        url += (url.indexOf('?') === -1 ? '?' : '&') + 's=' +\n\t               (new Date().getTime());\n\n\t        ajax.open('GET', url, this.async);\n\t        ajax.send();\n\t    }\n\t});\n\n\tmodule.exports = {\n\t    WebLoader: WebLoader,\n\t    PrecompiledLoader: PrecompiledLoader\n\t};\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar path = __webpack_require__(3);\n\tvar Obj = __webpack_require__(6);\n\tvar lib = __webpack_require__(1);\n\n\tvar Loader = Obj.extend({\n\t    on: function(name, func) {\n\t        this.listeners = this.listeners || {};\n\t        this.listeners[name] = this.listeners[name] || [];\n\t        this.listeners[name].push(func);\n\t    },\n\n\t    emit: function(name /*, arg1, arg2, ...*/) {\n\t        var args = Array.prototype.slice.call(arguments, 1);\n\n\t        if(this.listeners && this.listeners[name]) {\n\t            lib.each(this.listeners[name], function(listener) {\n\t                listener.apply(null, args);\n\t            });\n\t        }\n\t    },\n\n\t    resolve: function(from, to) {\n\t        return path.resolve(path.dirname(from), to);\n\t    },\n\n\t    isRelative: function(filename) {\n\t        return (filename.indexOf('./') === 0 || filename.indexOf('../') === 0);\n\t    }\n\t});\n\n\tmodule.exports = Loader;\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\tvar Loader = __webpack_require__(15);\n\n\tvar PrecompiledLoader = Loader.extend({\n\t    init: function(compiledTemplates) {\n\t        this.precompiled = compiledTemplates || {};\n\t    },\n\n\t    getSource: function(name) {\n\t        if (this.precompiled[name]) {\n\t            return {\n\t                src: { type: 'code',\n\t                       obj: this.precompiled[name] },\n\t                path: name\n\t            };\n\t        }\n\t        return null;\n\t    }\n\t});\n\n\tmodule.exports = PrecompiledLoader;\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\tfunction cycler(items) {\n\t    var index = -1;\n\n\t    return {\n\t        current: null,\n\t        reset: function() {\n\t            index = -1;\n\t            this.current = null;\n\t        },\n\n\t        next: function() {\n\t            index++;\n\t            if(index >= items.length) {\n\t                index = 0;\n\t            }\n\n\t            this.current = items[index];\n\t            return this.current;\n\t        },\n\t    };\n\n\t}\n\n\tfunction joiner(sep) {\n\t    sep = sep || ',';\n\t    var first = true;\n\n\t    return function() {\n\t        var val = first ? '' : sep;\n\t        first = false;\n\t        return val;\n\t    };\n\t}\n\n\t// Making this a function instead so it returns a new object\n\t// each time it's called. That way, if something like an environment\n\t// uses it, they will each have their own copy.\n\tfunction globals() {\n\t    return {\n\t        range: function(start, stop, step) {\n\t            if(typeof stop === 'undefined') {\n\t                stop = start;\n\t                start = 0;\n\t                step = 1;\n\t            }\n\t            else if(!step) {\n\t                step = 1;\n\t            }\n\n\t            var arr = [];\n\t            var i;\n\t            if (step > 0) {\n\t                for (i=start; i<stop; i+=step) {\n\t                    arr.push(i);\n\t                }\n\t            } else {\n\t                for (i=start; i>stop; i+=step) {\n\t                    arr.push(i);\n\t                }\n\t            }\n\t            return arr;\n\t        },\n\n\t        // lipsum: function(n, html, min, max) {\n\t        // },\n\n\t        cycler: function() {\n\t            return cycler(Array.prototype.slice.call(arguments));\n\t        },\n\n\t        joiner: function(sep) {\n\t            return joiner(sep);\n\t        }\n\t    };\n\t}\n\n\tmodule.exports = globals;\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports) {\n\n\tfunction installCompat() {\n\t  'use strict';\n\n\t  // This must be called like `nunjucks.installCompat` so that `this`\n\t  // references the nunjucks instance\n\t  var runtime = this.runtime; // jshint ignore:line\n\t  var lib = this.lib; // jshint ignore:line\n\n\t  var orig_contextOrFrameLookup = runtime.contextOrFrameLookup;\n\t  runtime.contextOrFrameLookup = function(context, frame, key) {\n\t    var val = orig_contextOrFrameLookup.apply(this, arguments);\n\t    if (val === undefined) {\n\t      switch (key) {\n\t      case 'True':\n\t        return true;\n\t      case 'False':\n\t        return false;\n\t      case 'None':\n\t        return null;\n\t      }\n\t    }\n\n\t    return val;\n\t  };\n\n\t  var orig_memberLookup = runtime.memberLookup;\n\t  var ARRAY_MEMBERS = {\n\t    pop: function(index) {\n\t      if (index === undefined) {\n\t        return this.pop();\n\t      }\n\t      if (index >= this.length || index < 0) {\n\t        throw new Error('KeyError');\n\t      }\n\t      return this.splice(index, 1);\n\t    },\n\t    remove: function(element) {\n\t      for (var i = 0; i < this.length; i++) {\n\t        if (this[i] === element) {\n\t          return this.splice(i, 1);\n\t        }\n\t      }\n\t      throw new Error('ValueError');\n\t    },\n\t    count: function(element) {\n\t      var count = 0;\n\t      for (var i = 0; i < this.length; i++) {\n\t        if (this[i] === element) {\n\t          count++;\n\t        }\n\t      }\n\t      return count;\n\t    },\n\t    index: function(element) {\n\t      var i;\n\t      if ((i = this.indexOf(element)) === -1) {\n\t        throw new Error('ValueError');\n\t      }\n\t      return i;\n\t    },\n\t    find: function(element) {\n\t      return this.indexOf(element);\n\t    },\n\t    insert: function(index, elem) {\n\t      return this.splice(index, 0, elem);\n\t    }\n\t  };\n\t  var OBJECT_MEMBERS = {\n\t    items: function() {\n\t      var ret = [];\n\t      for(var k in this) {\n\t        ret.push([k, this[k]]);\n\t      }\n\t      return ret;\n\t    },\n\t    values: function() {\n\t      var ret = [];\n\t      for(var k in this) {\n\t        ret.push(this[k]);\n\t      }\n\t      return ret;\n\t    },\n\t    keys: function() {\n\t      var ret = [];\n\t      for(var k in this) {\n\t        ret.push(k);\n\t      }\n\t      return ret;\n\t    },\n\t    get: function(key, def) {\n\t      var output = this[key];\n\t      if (output === undefined) {\n\t        output = def;\n\t      }\n\t      return output;\n\t    },\n\t    has_key: function(key) {\n\t      return this.hasOwnProperty(key);\n\t    },\n\t    pop: function(key, def) {\n\t      var output = this[key];\n\t      if (output === undefined && def !== undefined) {\n\t        output = def;\n\t      } else if (output === undefined) {\n\t        throw new Error('KeyError');\n\t      } else {\n\t        delete this[key];\n\t      }\n\t      return output;\n\t    },\n\t    popitem: function() {\n\t      for (var k in this) {\n\t        // Return the first object pair.\n\t        var val = this[k];\n\t        delete this[k];\n\t        return [k, val];\n\t      }\n\t      throw new Error('KeyError');\n\t    },\n\t    setdefault: function(key, def) {\n\t      if (key in this) {\n\t        return this[key];\n\t      }\n\t      if (def === undefined) {\n\t        def = null;\n\t      }\n\t      return this[key] = def;\n\t    },\n\t    update: function(kwargs) {\n\t      for (var k in kwargs) {\n\t        this[k] = kwargs[k];\n\t      }\n\t      return null;  // Always returns None\n\t    }\n\t  };\n\t  OBJECT_MEMBERS.iteritems = OBJECT_MEMBERS.items;\n\t  OBJECT_MEMBERS.itervalues = OBJECT_MEMBERS.values;\n\t  OBJECT_MEMBERS.iterkeys = OBJECT_MEMBERS.keys;\n\t  runtime.memberLookup = function(obj, val, autoescape) { // jshint ignore:line\n\t    obj = obj || {};\n\n\t    // If the object is an object, return any of the methods that Python would\n\t    // otherwise provide.\n\t    if (lib.isArray(obj) && ARRAY_MEMBERS.hasOwnProperty(val)) {\n\t      return function() {return ARRAY_MEMBERS[val].apply(obj, arguments);};\n\t    }\n\n\t    if (lib.isObject(obj) && OBJECT_MEMBERS.hasOwnProperty(val)) {\n\t      return function() {return OBJECT_MEMBERS[val].apply(obj, arguments);};\n\t    }\n\n\t    return orig_memberLookup.apply(this, arguments);\n\t  };\n\t}\n\n\tmodule.exports = installCompat;\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/nunjucks/browser/nunjucks.js\n ** module id = 4\n ** module chunks = 0\n **/"],"sourceRoot":""}